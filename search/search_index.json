{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Honeydew Documentation","text":"<p>Honeydew library is a collection of helper functions in developing ETL pipeline. Feel free to use it and have fun with your next ETL workflows!</p>"},{"location":"#supported-connectors","title":"Supported connectors:","text":"<ul> <li>MySQL</li> <li>GCP</li> <li>GCP BigQuery</li> <li>GCP Cloud Logging</li> <li>GCP Secret Manager</li> <li>GCP Cloud Storage</li> <li>GCP Translate</li> <li>SSH</li> </ul>"},{"location":"#utility-functions","title":"Utility functions:","text":"<ul> <li>Utils</li> <li>Notification</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>To install honeydew, run the following command from the command line: Bash<pre><code>pip install honeydew --upgrade\n</code></pre></p>"},{"location":"#repository","title":"Repository","text":"<p>Check out the source code here!  Cheers!  Poltak Jefferson</p>"},{"location":"gcp-bigquery/","title":"GCP BigQuery Connector","text":""},{"location":"gcp-bigquery/#honeydew.gcp_bigquery.GcpBigQuery","title":"<code>GcpBigQuery</code>","text":"<p>Instantiate a GCP BigQuery connector.</p> <p>Parameters:</p> Name Type Description Default <code>credential_file</code> <code>str</code> <p>Credential json file</p> required <code>proxy</code> <code>str</code> <p>Proxy address</p> <code>''</code> Source code in <code>honeydew/gcp_bigquery.py</code> Python<pre><code>class GcpBigQuery:\n    \"\"\"\n    Instantiate a GCP BigQuery connector.\n\n    Args:\n        credential_file (str): Credential json file\n        proxy (str): Proxy address\n    \"\"\"\n    def __init__(self, credential_file, proxy=''):\n        self.credential_file = credential_file\n        self.proxy = proxy\n        os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = credential_file\n        if proxy != '':\n            os.environ['HTTP_PROXY'] = proxy\n            os.environ['HTTPS_PROXY'] = proxy\n\n    def query_to_dataframe(self, project_id, query, timeout=3600, method=1):\n        \"\"\"\n        Submit query to BigQuery and store result into pandas dataframe\n\n        Args:\n            project_id (str): Project ID\n            query (str): SQL query\n            timeout (int): Query timeout in seconds\n            method (int): API that will be used to query (1: google-cloud-bigquery, 2: pandas-gbq)\n\n        Returns:\n            result (dataframe)): Result in pandas dataframe\n        \"\"\"\n        df = pd.DataFrame()\n        bqclient = bigquery.Client(project=project_id)\n        query_job = bqclient.query(query)\n        if method == 2:\n            df = pd.read_gbq(query=query, project_id=project_id)\n        else:\n            rows = list(query_job.result(timeout=timeout))\n            df = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\n        return df\n\n    def query_non_dql(self, project_id, query):\n        \"\"\"\n        Submit non Data Query Language (DQL) type of query to BigQuery. Example: CREATE, DROP, TRUNCATE, INSERT, UPDATE, DELETE\n\n        Args:\n            project_id (str): Project ID\n            query (str): SQL query\n\n        Returns:\n            result (result): Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result\n        \"\"\"\n        bqclient = bigquery.Client(project=project_id)\n        query_job = bqclient.query(query)\n        results = query_job.result()\n        return results\n\n    def bq_export_table_to_gcs(self, project_id, dataset_id, table_id, gcs_uri, format='CSV', delimiter=',', enable_compression=True, compression='GZIP', overwrite=True, region='northamerica-northeast1'):\n        \"\"\"\n        Export BigQuery table into Google Cloud Storage (GCS)\n\n        Args:\n            project_id (str): Project ID\n            table_id (str): Table ID\n            dataset_id (str): Dataset ID\n            gcs_uri (str): GCS URI as destination. Example: 'gs://my-bucket/my-dir/tickets-20220101-*.csv.gz'\n            format (str): File format (CSV, JSON, Avro, Parquet). Default: 'CSV'\n            delimiter (str): CSV delimiter character. Default: ','\n            enable_compression (boolean): Files will be compressed if the value is True. Default: True\n            compression (str): Compression format. Default: GZIP. Reference: https://cloud.google.com/bigquery/docs/exporting-data#export_formats_and_compression_types\n            overwrite (boolean): GCS URI destination will be overwritten if the value is True. Default: True\n            region (str): Region to run the process. Default: 'northamerica-northeast1'\n\n        Returns:\n            result (result): Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result\n        \"\"\"\n        bqclient = bigquery.Client(project=project_id)\n        dataset_ref = bigquery.DatasetReference(project_id, dataset_id)\n        table_ref = dataset_ref.table(table_id)\n        job_config = bigquery.job.ExtractJobConfig()\n        if enable_compression == True:\n            if compression == 'DEFLATE':\n                job_config.compression = bigquery.Compression.DEFLATE\n            if compression == 'SNAPPY':\n                job_config.compression = bigquery.Compression.SNAPPY\n            else:\n                job_config.compression = bigquery.Compression.GZIP\n\n        extract_job = bqclient.extract_table(table_ref, gcs_uri, location=region, job_config=job_config)\n        results = extract_job.result()\n        return results\n\n    # Load dataframe into BigQuery table\n    def bq_load_dataframe(self, project_id, dataset_id, table_id, dataframe, write_disposition='WRITE_TRUNCATE', location='northamerica-northeast1'):\n        \"\"\"\n        Load dataframe into BigQuery table\n\n        Args:\n            project_id (str): Project ID\n            table_id (str): Table ID\n            dataset_id (str): Dataset ID\n            dataframe (dataframe): Dataframe to be loaded\n            write_disposition (str): Write disposition. Default: 'WRITE_TRUNCATE'. Options: 'WRITE_TRUNCATE', 'WRITE_APPEND', 'WRITE_EMPTY'\n            location (str): Region to run the process. Default: 'northamerica-northeast1'\n\n        Returns:\n            result (result): Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result\n        \"\"\"\n        bqclient = bigquery.Client(project=project_id)\n        dataset_ref = bqclient.dataset(dataset_id)\n        table_ref = dataset_ref.table(table_id)\n        job_config = bigquery.LoadJobConfig()\n        job_config.write_disposition = write_disposition\n        job_config.location = location\n        job = bqclient.load_table_from_dataframe(dataframe, table_ref, job_config=job_config)\n        results = job.result()\n        return results\n\n\n    # Get list of tables in a dataset\n    def get_table_list(self, project_id, dataset_id):\n        \"\"\"\n        Get list of tables in a dataset\n\n        Args:\n            project_id (str): Project ID\n            dataset_id (str): Dataset ID\n\n        Returns:\n            result (list): List of tables in a dataset\n        \"\"\"\n        bqclient = bigquery.Client(project=project_id)\n        dataset_ref = bigquery.DatasetReference(project_id, dataset_id)\n        tables = bqclient.list_tables(dataset_ref)\n        table_list = [table.table_id for table in tables]\n        return table_list\n\n    # Get list of datasets in a project\n    def get_dataset_list(self, project_id):\n        \"\"\"\n        Get list of datasets in a project\n\n        Args:\n            project_id (str): Project ID\n\n        Returns:\n            result (list): List of datasets in a project\n        \"\"\"\n        bqclient = bigquery.Client(project=project_id)\n        datasets = bqclient.list_datasets()\n        dataset_list = [dataset.dataset_id for dataset in datasets]\n        return dataset_list\n\n    # Get list of partitions in a table\n    def get_table_properties(self, project_id, dataset_id, table_id):\n        \"\"\"\n        Get table properties\n\n        Args:\n            project_id (str): Project ID\n            dataset_id (str): Dataset ID\n            table_id (str): Table ID\n\n        Returns:\n            result (list): List of partitions in a table\n        \"\"\"\n        bqclient = bigquery.Client(project=project_id)\n        dataset_ref = bigquery.DatasetReference(project_id, dataset_id)\n        table_ref = dataset_ref.table(table_id)\n        table = bqclient.get_table(table_ref)\n        return table\n\n    # Get users who have access to a dataset\n    def get_dataset_access(self, project_id, dataset_id):\n        \"\"\"\n        Get users who have access to a dataset\n\n        Args:\n            project_id (str): Project ID\n            dataset_id (str): Dataset ID\n\n        Returns:\n            result (list): List of users who have access to a dataset\n        \"\"\"\n        bqclient = bigquery.Client(project=project_id)\n        dataset_ref = bigquery.DatasetReference(project_id, dataset_id)\n        dataset = bqclient.get_dataset(dataset_ref)\n        access_list = dataset.access_entries\n        return access_list\n\n    # Get users who have access to a table\n    def get_table_access(self, project_id, dataset_id, table_id):\n        \"\"\"\n        Get users who have access to a table\n\n        Args:\n            project_id (str): Project ID\n            dataset_id (str): Dataset ID\n            table_id (str): Table ID\n\n        Returns:\n            result (list): List of users who have access to a table\n        \"\"\"\n        bqclient = bigquery.Client(project=project_id)\n        dataset_ref = bigquery.DatasetReference(project_id, dataset_id)\n        table_ref = dataset_ref.table(table_id)\n        table = bqclient.get_table(table_ref)\n        access_list = table.access_entries\n        return access_list\n\n    # Get table schema\n    def get_table_schema(self, project_id, dataset_id, table_id):\n        \"\"\"\n        Get table schema\n\n        Args:\n            project_id (str): Project ID\n            dataset_id (str): Dataset ID\n            table_id (str): Table ID\n\n        Returns:\n            result (list): List of table schema\n        \"\"\"\n        bqclient = bigquery.Client(project=project_id)\n        dataset_ref = bigquery.DatasetReference(project_id, dataset_id)\n        table_ref = dataset_ref.table(table_id)\n        table = bqclient.get_table(table_ref)\n        schema = table.schema\n        return schema\n\n    # Get table description\n    def get_table_description(self, project_id, dataset_id, table_id):\n        \"\"\"\n        Get table description\n\n        Args:\n            project_id (str): Project ID\n            dataset_id (str): Dataset ID\n            table_id (str): Table ID\n\n        Returns:\n            result (str): Table description\n        \"\"\"\n        bqclient = bigquery.Client(project=project_id)\n        dataset_ref = bigquery.DatasetReference(project_id, dataset_id)\n        table_ref = dataset_ref.table(table_id)\n        table = bqclient.get_table(table_ref)\n        description = table.description\n        return description\n</code></pre>"},{"location":"gcp-bigquery/#honeydew.gcp_bigquery.GcpBigQuery.bq_export_table_to_gcs","title":"<code>bq_export_table_to_gcs(project_id, dataset_id, table_id, gcs_uri, format='CSV', delimiter=',', enable_compression=True, compression='GZIP', overwrite=True, region='northamerica-northeast1')</code>","text":"<p>Export BigQuery table into Google Cloud Storage (GCS)</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>table_id</code> <code>str</code> <p>Table ID</p> required <code>dataset_id</code> <code>str</code> <p>Dataset ID</p> required <code>gcs_uri</code> <code>str</code> <p>GCS URI as destination. Example: 'gs://my-bucket/my-dir/tickets-20220101-*.csv.gz'</p> required <code>format</code> <code>str</code> <p>File format (CSV, JSON, Avro, Parquet). Default: 'CSV'</p> <code>'CSV'</code> <code>delimiter</code> <code>str</code> <p>CSV delimiter character. Default: ','</p> <code>','</code> <code>enable_compression</code> <code>boolean</code> <p>Files will be compressed if the value is True. Default: True</p> <code>True</code> <code>compression</code> <code>str</code> <p>Compression format. Default: GZIP. Reference: https://cloud.google.com/bigquery/docs/exporting-data#export_formats_and_compression_types</p> <code>'GZIP'</code> <code>overwrite</code> <code>boolean</code> <p>GCS URI destination will be overwritten if the value is True. Default: True</p> <code>True</code> <code>region</code> <code>str</code> <p>Region to run the process. Default: 'northamerica-northeast1'</p> <code>'northamerica-northeast1'</code> <p>Returns:</p> Name Type Description <code>result</code> <code>result</code> <p>Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result</p> Source code in <code>honeydew/gcp_bigquery.py</code> Python<pre><code>def bq_export_table_to_gcs(self, project_id, dataset_id, table_id, gcs_uri, format='CSV', delimiter=',', enable_compression=True, compression='GZIP', overwrite=True, region='northamerica-northeast1'):\n    \"\"\"\n    Export BigQuery table into Google Cloud Storage (GCS)\n\n    Args:\n        project_id (str): Project ID\n        table_id (str): Table ID\n        dataset_id (str): Dataset ID\n        gcs_uri (str): GCS URI as destination. Example: 'gs://my-bucket/my-dir/tickets-20220101-*.csv.gz'\n        format (str): File format (CSV, JSON, Avro, Parquet). Default: 'CSV'\n        delimiter (str): CSV delimiter character. Default: ','\n        enable_compression (boolean): Files will be compressed if the value is True. Default: True\n        compression (str): Compression format. Default: GZIP. Reference: https://cloud.google.com/bigquery/docs/exporting-data#export_formats_and_compression_types\n        overwrite (boolean): GCS URI destination will be overwritten if the value is True. Default: True\n        region (str): Region to run the process. Default: 'northamerica-northeast1'\n\n    Returns:\n        result (result): Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result\n    \"\"\"\n    bqclient = bigquery.Client(project=project_id)\n    dataset_ref = bigquery.DatasetReference(project_id, dataset_id)\n    table_ref = dataset_ref.table(table_id)\n    job_config = bigquery.job.ExtractJobConfig()\n    if enable_compression == True:\n        if compression == 'DEFLATE':\n            job_config.compression = bigquery.Compression.DEFLATE\n        if compression == 'SNAPPY':\n            job_config.compression = bigquery.Compression.SNAPPY\n        else:\n            job_config.compression = bigquery.Compression.GZIP\n\n    extract_job = bqclient.extract_table(table_ref, gcs_uri, location=region, job_config=job_config)\n    results = extract_job.result()\n    return results\n</code></pre>"},{"location":"gcp-bigquery/#honeydew.gcp_bigquery.GcpBigQuery.bq_load_dataframe","title":"<code>bq_load_dataframe(project_id, dataset_id, table_id, dataframe, write_disposition='WRITE_TRUNCATE', location='northamerica-northeast1')</code>","text":"<p>Load dataframe into BigQuery table</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>table_id</code> <code>str</code> <p>Table ID</p> required <code>dataset_id</code> <code>str</code> <p>Dataset ID</p> required <code>dataframe</code> <code>dataframe</code> <p>Dataframe to be loaded</p> required <code>write_disposition</code> <code>str</code> <p>Write disposition. Default: 'WRITE_TRUNCATE'. Options: 'WRITE_TRUNCATE', 'WRITE_APPEND', 'WRITE_EMPTY'</p> <code>'WRITE_TRUNCATE'</code> <code>location</code> <code>str</code> <p>Region to run the process. Default: 'northamerica-northeast1'</p> <code>'northamerica-northeast1'</code> <p>Returns:</p> Name Type Description <code>result</code> <code>result</code> <p>Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result</p> Source code in <code>honeydew/gcp_bigquery.py</code> Python<pre><code>def bq_load_dataframe(self, project_id, dataset_id, table_id, dataframe, write_disposition='WRITE_TRUNCATE', location='northamerica-northeast1'):\n    \"\"\"\n    Load dataframe into BigQuery table\n\n    Args:\n        project_id (str): Project ID\n        table_id (str): Table ID\n        dataset_id (str): Dataset ID\n        dataframe (dataframe): Dataframe to be loaded\n        write_disposition (str): Write disposition. Default: 'WRITE_TRUNCATE'. Options: 'WRITE_TRUNCATE', 'WRITE_APPEND', 'WRITE_EMPTY'\n        location (str): Region to run the process. Default: 'northamerica-northeast1'\n\n    Returns:\n        result (result): Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result\n    \"\"\"\n    bqclient = bigquery.Client(project=project_id)\n    dataset_ref = bqclient.dataset(dataset_id)\n    table_ref = dataset_ref.table(table_id)\n    job_config = bigquery.LoadJobConfig()\n    job_config.write_disposition = write_disposition\n    job_config.location = location\n    job = bqclient.load_table_from_dataframe(dataframe, table_ref, job_config=job_config)\n    results = job.result()\n    return results\n</code></pre>"},{"location":"gcp-bigquery/#honeydew.gcp_bigquery.GcpBigQuery.get_dataset_access","title":"<code>get_dataset_access(project_id, dataset_id)</code>","text":"<p>Get users who have access to a dataset</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>dataset_id</code> <code>str</code> <p>Dataset ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>list</code> <p>List of users who have access to a dataset</p> Source code in <code>honeydew/gcp_bigquery.py</code> Python<pre><code>def get_dataset_access(self, project_id, dataset_id):\n    \"\"\"\n    Get users who have access to a dataset\n\n    Args:\n        project_id (str): Project ID\n        dataset_id (str): Dataset ID\n\n    Returns:\n        result (list): List of users who have access to a dataset\n    \"\"\"\n    bqclient = bigquery.Client(project=project_id)\n    dataset_ref = bigquery.DatasetReference(project_id, dataset_id)\n    dataset = bqclient.get_dataset(dataset_ref)\n    access_list = dataset.access_entries\n    return access_list\n</code></pre>"},{"location":"gcp-bigquery/#honeydew.gcp_bigquery.GcpBigQuery.get_dataset_list","title":"<code>get_dataset_list(project_id)</code>","text":"<p>Get list of datasets in a project</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>list</code> <p>List of datasets in a project</p> Source code in <code>honeydew/gcp_bigquery.py</code> Python<pre><code>def get_dataset_list(self, project_id):\n    \"\"\"\n    Get list of datasets in a project\n\n    Args:\n        project_id (str): Project ID\n\n    Returns:\n        result (list): List of datasets in a project\n    \"\"\"\n    bqclient = bigquery.Client(project=project_id)\n    datasets = bqclient.list_datasets()\n    dataset_list = [dataset.dataset_id for dataset in datasets]\n    return dataset_list\n</code></pre>"},{"location":"gcp-bigquery/#honeydew.gcp_bigquery.GcpBigQuery.get_table_access","title":"<code>get_table_access(project_id, dataset_id, table_id)</code>","text":"<p>Get users who have access to a table</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>dataset_id</code> <code>str</code> <p>Dataset ID</p> required <code>table_id</code> <code>str</code> <p>Table ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>list</code> <p>List of users who have access to a table</p> Source code in <code>honeydew/gcp_bigquery.py</code> Python<pre><code>def get_table_access(self, project_id, dataset_id, table_id):\n    \"\"\"\n    Get users who have access to a table\n\n    Args:\n        project_id (str): Project ID\n        dataset_id (str): Dataset ID\n        table_id (str): Table ID\n\n    Returns:\n        result (list): List of users who have access to a table\n    \"\"\"\n    bqclient = bigquery.Client(project=project_id)\n    dataset_ref = bigquery.DatasetReference(project_id, dataset_id)\n    table_ref = dataset_ref.table(table_id)\n    table = bqclient.get_table(table_ref)\n    access_list = table.access_entries\n    return access_list\n</code></pre>"},{"location":"gcp-bigquery/#honeydew.gcp_bigquery.GcpBigQuery.get_table_description","title":"<code>get_table_description(project_id, dataset_id, table_id)</code>","text":"<p>Get table description</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>dataset_id</code> <code>str</code> <p>Dataset ID</p> required <code>table_id</code> <code>str</code> <p>Table ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Table description</p> Source code in <code>honeydew/gcp_bigquery.py</code> Python<pre><code>def get_table_description(self, project_id, dataset_id, table_id):\n    \"\"\"\n    Get table description\n\n    Args:\n        project_id (str): Project ID\n        dataset_id (str): Dataset ID\n        table_id (str): Table ID\n\n    Returns:\n        result (str): Table description\n    \"\"\"\n    bqclient = bigquery.Client(project=project_id)\n    dataset_ref = bigquery.DatasetReference(project_id, dataset_id)\n    table_ref = dataset_ref.table(table_id)\n    table = bqclient.get_table(table_ref)\n    description = table.description\n    return description\n</code></pre>"},{"location":"gcp-bigquery/#honeydew.gcp_bigquery.GcpBigQuery.get_table_list","title":"<code>get_table_list(project_id, dataset_id)</code>","text":"<p>Get list of tables in a dataset</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>dataset_id</code> <code>str</code> <p>Dataset ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>list</code> <p>List of tables in a dataset</p> Source code in <code>honeydew/gcp_bigquery.py</code> Python<pre><code>def get_table_list(self, project_id, dataset_id):\n    \"\"\"\n    Get list of tables in a dataset\n\n    Args:\n        project_id (str): Project ID\n        dataset_id (str): Dataset ID\n\n    Returns:\n        result (list): List of tables in a dataset\n    \"\"\"\n    bqclient = bigquery.Client(project=project_id)\n    dataset_ref = bigquery.DatasetReference(project_id, dataset_id)\n    tables = bqclient.list_tables(dataset_ref)\n    table_list = [table.table_id for table in tables]\n    return table_list\n</code></pre>"},{"location":"gcp-bigquery/#honeydew.gcp_bigquery.GcpBigQuery.get_table_properties","title":"<code>get_table_properties(project_id, dataset_id, table_id)</code>","text":"<p>Get table properties</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>dataset_id</code> <code>str</code> <p>Dataset ID</p> required <code>table_id</code> <code>str</code> <p>Table ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>list</code> <p>List of partitions in a table</p> Source code in <code>honeydew/gcp_bigquery.py</code> Python<pre><code>def get_table_properties(self, project_id, dataset_id, table_id):\n    \"\"\"\n    Get table properties\n\n    Args:\n        project_id (str): Project ID\n        dataset_id (str): Dataset ID\n        table_id (str): Table ID\n\n    Returns:\n        result (list): List of partitions in a table\n    \"\"\"\n    bqclient = bigquery.Client(project=project_id)\n    dataset_ref = bigquery.DatasetReference(project_id, dataset_id)\n    table_ref = dataset_ref.table(table_id)\n    table = bqclient.get_table(table_ref)\n    return table\n</code></pre>"},{"location":"gcp-bigquery/#honeydew.gcp_bigquery.GcpBigQuery.get_table_schema","title":"<code>get_table_schema(project_id, dataset_id, table_id)</code>","text":"<p>Get table schema</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>dataset_id</code> <code>str</code> <p>Dataset ID</p> required <code>table_id</code> <code>str</code> <p>Table ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>list</code> <p>List of table schema</p> Source code in <code>honeydew/gcp_bigquery.py</code> Python<pre><code>def get_table_schema(self, project_id, dataset_id, table_id):\n    \"\"\"\n    Get table schema\n\n    Args:\n        project_id (str): Project ID\n        dataset_id (str): Dataset ID\n        table_id (str): Table ID\n\n    Returns:\n        result (list): List of table schema\n    \"\"\"\n    bqclient = bigquery.Client(project=project_id)\n    dataset_ref = bigquery.DatasetReference(project_id, dataset_id)\n    table_ref = dataset_ref.table(table_id)\n    table = bqclient.get_table(table_ref)\n    schema = table.schema\n    return schema\n</code></pre>"},{"location":"gcp-bigquery/#honeydew.gcp_bigquery.GcpBigQuery.query_non_dql","title":"<code>query_non_dql(project_id, query)</code>","text":"<p>Submit non Data Query Language (DQL) type of query to BigQuery. Example: CREATE, DROP, TRUNCATE, INSERT, UPDATE, DELETE</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>query</code> <code>str</code> <p>SQL query</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>result</code> <p>Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result</p> Source code in <code>honeydew/gcp_bigquery.py</code> Python<pre><code>def query_non_dql(self, project_id, query):\n    \"\"\"\n    Submit non Data Query Language (DQL) type of query to BigQuery. Example: CREATE, DROP, TRUNCATE, INSERT, UPDATE, DELETE\n\n    Args:\n        project_id (str): Project ID\n        query (str): SQL query\n\n    Returns:\n        result (result): Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result\n    \"\"\"\n    bqclient = bigquery.Client(project=project_id)\n    query_job = bqclient.query(query)\n    results = query_job.result()\n    return results\n</code></pre>"},{"location":"gcp-bigquery/#honeydew.gcp_bigquery.GcpBigQuery.query_to_dataframe","title":"<code>query_to_dataframe(project_id, query, timeout=3600, method=1)</code>","text":"<p>Submit query to BigQuery and store result into pandas dataframe</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>query</code> <code>str</code> <p>SQL query</p> required <code>timeout</code> <code>int</code> <p>Query timeout in seconds</p> <code>3600</code> <code>method</code> <code>int</code> <p>API that will be used to query (1: google-cloud-bigquery, 2: pandas-gbq)</p> <code>1</code> <p>Returns:</p> Name Type Description <code>result</code> <code>dataframe)</code> <p>Result in pandas dataframe</p> Source code in <code>honeydew/gcp_bigquery.py</code> Python<pre><code>def query_to_dataframe(self, project_id, query, timeout=3600, method=1):\n    \"\"\"\n    Submit query to BigQuery and store result into pandas dataframe\n\n    Args:\n        project_id (str): Project ID\n        query (str): SQL query\n        timeout (int): Query timeout in seconds\n        method (int): API that will be used to query (1: google-cloud-bigquery, 2: pandas-gbq)\n\n    Returns:\n        result (dataframe)): Result in pandas dataframe\n    \"\"\"\n    df = pd.DataFrame()\n    bqclient = bigquery.Client(project=project_id)\n    query_job = bqclient.query(query)\n    if method == 2:\n        df = pd.read_gbq(query=query, project_id=project_id)\n    else:\n        rows = list(query_job.result(timeout=timeout))\n        df = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\n    return df\n</code></pre>"},{"location":"gcp-logging/","title":"GCP Cloud Logging Connector","text":""},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging","title":"<code>GcpLogging</code>","text":"<p>Instantiate Google Cloud Logging client.</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>class GcpLogging:\n    \"\"\"Instantiate Google Cloud Logging client.\n    \"\"\"\n    def __init__(self, credential_file=None, proxy=''):\n        \"\"\"Instantiate Google Cloud Logging client.\n\n        Args:\n            credential_file (str): Credential file path. Default: None\n            proxy (str): Proxy URL. Default: ''\n        \"\"\"\n        if credential_file is not None:\n            os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credential_file\n        if proxy != '':\n            os.environ['HTTPS_PROXY'] = proxy\n        self.client = logging.Client()\n\n    def list_logs(self, project_id, filter_str=None):\n        \"\"\"\n        List logs in a project.\n\n        Args:\n            project_id (str): Project ID\n            filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n\n        Returns:\n            result (list): List of logs\n        \"\"\"\n        logs = self.client.list_logs(project_id=project_id, filter_=filter_str)\n        return logs\n\n    def list_entries(self, project_id, filter_str=None):\n        \"\"\"\n        List log entries in a project.\n\n        Args:\n            project_id (str): Project ID\n            filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n\n        Returns:\n            result (list): List of log entries\n        \"\"\"\n        entries = self.client.list_entries(project_id=project_id, filter_=filter_str)\n        return entries\n\n    def write_log(self, project_id, log_name, resource, labels, text_payload=None, json_payload=None):\n        \"\"\"\n        Write a log entry.\n\n        Args:\n            project_id (str): Project ID\n            log_name (str): Log name. Example: 'my-log'\n            resource (dict): Resource. Example: {'type': 'global'}\n            labels (dict): Labels. Example: {'env': 'dev', 'app': 'my-app'}\n            text_payload (str): Text payload. Example: 'my log message'\n            json_payload (dict): JSON payload. Example: {'message': 'my log message'}\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        logger = self.client.logger(log_name)\n        logger.log_text(text_payload, resource=resource, labels=labels)\n        logger.log_struct(json_payload, resource=resource, labels=labels)\n        results = 'OK'\n        return results\n\n    def delete_log(self, project_id, log_name):\n        \"\"\"\n        Delete a log.\n\n        Args:\n            project_id (str): Project ID\n            log_name (str): Log name. Example: 'my-log'\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        logger = self.client.logger(log_name)\n        logger.delete()\n        results = 'OK'\n        return results\n\n    def delete_many_logs(self, project_id, filter_str=None):\n        \"\"\"\n        Delete multiple logs.\n\n        Args:\n            project_id (str): Project ID\n            filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        logs = self.client.list_logs(project_id=project_id, filter_=filter_str)\n        for log in logs:\n            log.delete()\n        results = 'OK'\n        return results\n\n    def delete_log_entries(self, project_id, filter_str=None):\n        \"\"\"\n        Delete log entries.\n\n        Args:\n            project_id (str): Project ID\n            filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        entries = self.client.list_entries(project_id=project_id, filter_=filter_str)\n        for entry in entries:\n            entry.delete()\n        results = 'OK'\n        return results\n\n    def delete_many_log_entries(self, project_id, filter_str=None):\n        \"\"\"\n        Delete multiple log entries.\n\n        Args:\n            project_id (str): Project ID\n            filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        entries = self.client.list_entries(project_id=project_id, filter_=filter_str)\n        for entry in entries:\n            entry.delete()\n        results = 'OK'\n        return results\n\n    def list_sinks(self, project_id):\n        \"\"\"\n        List sinks in a project.\n\n        Args:\n            project_id (str): Project ID\n\n        Returns:\n            result (list): List of sinks\n        \"\"\"\n        sinks = self.client.list_sinks(project_id=project_id)\n        return sinks\n\n    def create_sink(self, project_id, sink_name, filter_str, destination):\n        \"\"\"\n        Create a sink.\n\n        Args:\n            project_id (str): Project ID\n            sink_name (str): Sink name. Example: 'my-sink'\n            filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n            destination (dict): Destination. Example: {'writer_identity': 'serviceAccount:\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        sink = self.client.sink(sink_name, filter_=filter_str, destination=destination)\n        sink.create()\n        results = 'OK'\n        return results\n\n    def delete_sink(self, project_id, sink_name):\n        \"\"\"\n        Delete a sink.\n\n        Args:\n            project_id (str): Project ID\n            sink_name (str): Sink name. Example: 'my-sink'\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        sink = self.client.sink(sink_name)\n        sink.delete()\n        results = 'OK'\n        return results\n\n    def delete_many_sinks(self, project_id):\n        \"\"\"\n        Delete multiple sinks.\n\n        Args:\n            project_id (str): Project ID\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        sinks = self.client.list_sinks(project_id=project_id)\n        for sink in sinks:\n            sink.delete()\n        results = 'OK'\n        return results\n\n    def get_sink(self, project_id, sink_name):\n        \"\"\"\n        Get a sink.\n\n        Args:\n            project_id (str): Project ID\n            sink_name (str): Sink name. Example: 'my-sink'\n\n        Returns:\n            result (dict): Sink\n        \"\"\"\n        sink = self.client.sink(sink_name)\n        return sink\n\n    def update_sink(self, project_id, sink_name, filter_str, destination):\n        \"\"\"\n        Update a sink.\n\n        Args:\n            project_id (str): Project ID\n            sink_name (str): Sink name. Example: 'my-sink'\n            filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n            destination (dict): Destination. Example: {'writer_identity': 'serviceAccount:\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        sink = self.client.sink(sink_name, filter_=filter_str, destination=destination)\n        sink.update()\n        results = 'OK'\n        return results\n\n    def list_exclusions(self, project_id):\n        \"\"\"\n        List exclusions in a project.\n\n        Args:\n            project_id (str): Project ID\n\n        Returns:\n            result (list): List of exclusions\n        \"\"\"\n        exclusions = self.client.list_exclusions(project_id=project_id)\n        return exclusions\n\n    def create_exclusion(self, project_id, exclusion_name, filter_str):\n        \"\"\"\n        Create an exclusion.\n\n        Args:\n            project_id (str): Project ID\n            exclusion_name (str): Exclusion name. Example: 'my-exclusion'\n            filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        exclusion = self.client.exclusion(exclusion_name, filter_=filter_str)\n        exclusion.create()\n        results = 'OK'\n        return results\n\n    def delete_exclusion(self, project_id, exclusion_name):\n        \"\"\"\n        Delete an exclusion.\n\n        Args:\n            project_id (str): Project ID\n            exclusion_name (str): Exclusion name. Example: 'my-exclusion'\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        exclusion = self.client.exclusion(exclusion_name)\n        exclusion.delete()\n        results = 'OK'\n        return results\n\n    def delete_many_exclusions(self, project_id):\n        \"\"\"\n        Delete multiple exclusions.\n\n        Args:\n            project_id (str): Project ID\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        exclusions = self.client.list_exclusions(project_id=project_id)\n        for exclusion in exclusions:\n            exclusion.delete()\n        results = 'OK'\n        return results\n\n    def get_exclusion(self, project_id, exclusion_name):\n        \"\"\"\n        Get an exclusion.\n\n        Args:\n            project_id (str): Project ID\n            exclusion_name (str): Exclusion name. Example: 'my-exclusion'\n\n        Returns:\n            result (dict): Exclusion\n        \"\"\"\n        exclusion = self.client.exclusion(exclusion_name)\n        return exclusion\n\n    def update_exclusion(self, project_id, exclusion_name, filter_str):\n        \"\"\"\n        Update an exclusion.\n\n        Args:\n            project_id (str): Project ID\n            exclusion_name (str): Exclusion name. Example: 'my-exclusion'\n            filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        exclusion = self.client.exclusion(exclusion_name, filter_=filter_str)\n        exclusion.update()\n        results = 'OK'\n        return results\n\n    def list_monitored_resource_descriptors(self, project_id):\n        \"\"\"\n        List monitored resource descriptors in a project.\n\n        Args:\n            project_id (str): Project ID\n\n        Returns:\n            result (list): List of monitored resource descriptors\n        \"\"\"\n        descriptors = self.client.list_monitored_resource_descriptors(project_id=project_id)\n        return descriptors\n\n    def get_monitored_resource_descriptor(self, project_id, descriptor_name):\n        \"\"\"\n        Get a monitored resource descriptor.\n\n        Args:\n            project_id (str): Project ID\n            descriptor_name (str): Descriptor name. Example: 'my-descriptor'\n\n        Returns:\n            result (dict): Monitored resource descriptor\n        \"\"\"\n        descriptor = self.client.monitored_resource_descriptor(descriptor_name)\n        return descriptor\n\n    def list_metric_descriptors(self, project_id):\n        \"\"\"\n        List metric descriptors in a project.\n\n        Args:\n            project_id (str): Project ID\n\n        Returns:\n            result (list): List of metric descriptors\n        \"\"\"\n        descriptors = self.client.list_metric_descriptors(project_id=project_id)\n        return descriptors\n\n    def get_metric_descriptor(self, project_id, descriptor_name):\n        \"\"\"\n        Get a metric descriptor.\n\n        Args:\n            project_id (str): Project ID\n            descriptor_name (str): Descriptor name. Example: 'my-descriptor'\n\n        Returns:\n            result (dict): Metric descriptor\n        \"\"\"\n        descriptor = self.client.metric_descriptor(descriptor_name)\n        return descriptor\n\n    def list_logs_based_metrics(self, project_id):\n        \"\"\"\n        List logs-based metrics in a project.\n\n        Args:\n            project_id (str): Project ID\n\n        Returns:\n            result (list): List of logs-based metrics\n        \"\"\"\n        metrics = self.client.list_logs_based_metrics(project_id=project_id)\n        return metrics\n\n    def get_logs_based_metric(self, project_id, metric_name):\n        \"\"\"\n        Get a logs-based metric.\n\n        Args:\n            project_id (str): Project ID\n            metric_name (str): Metric name. Example: 'my-metric'\n\n        Returns:\n            result (dict): Logs-based metric\n        \"\"\"\n        metric = self.client.logs_based_metric(metric_name)\n        return metric\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.__init__","title":"<code>__init__(credential_file=None, proxy='')</code>","text":"<p>Instantiate Google Cloud Logging client.</p> <p>Parameters:</p> Name Type Description Default <code>credential_file</code> <code>str</code> <p>Credential file path. Default: None</p> <code>None</code> <code>proxy</code> <code>str</code> <p>Proxy URL. Default: ''</p> <code>''</code> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def __init__(self, credential_file=None, proxy=''):\n    \"\"\"Instantiate Google Cloud Logging client.\n\n    Args:\n        credential_file (str): Credential file path. Default: None\n        proxy (str): Proxy URL. Default: ''\n    \"\"\"\n    if credential_file is not None:\n        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credential_file\n    if proxy != '':\n        os.environ['HTTPS_PROXY'] = proxy\n    self.client = logging.Client()\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.create_exclusion","title":"<code>create_exclusion(project_id, exclusion_name, filter_str)</code>","text":"<p>Create an exclusion.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>exclusion_name</code> <code>str</code> <p>Exclusion name. Example: 'my-exclusion'</p> required <code>filter_str</code> <code>str</code> <p>Filter string. Example: 'resource.type=\"bigquery_resource\"'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def create_exclusion(self, project_id, exclusion_name, filter_str):\n    \"\"\"\n    Create an exclusion.\n\n    Args:\n        project_id (str): Project ID\n        exclusion_name (str): Exclusion name. Example: 'my-exclusion'\n        filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    exclusion = self.client.exclusion(exclusion_name, filter_=filter_str)\n    exclusion.create()\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.create_sink","title":"<code>create_sink(project_id, sink_name, filter_str, destination)</code>","text":"<p>Create a sink.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>sink_name</code> <code>str</code> <p>Sink name. Example: 'my-sink'</p> required <code>filter_str</code> <code>str</code> <p>Filter string. Example: 'resource.type=\"bigquery_resource\"'</p> required <code>destination</code> <code>dict</code> <p>Destination. Example: {'writer_identity': 'serviceAccount:</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def create_sink(self, project_id, sink_name, filter_str, destination):\n    \"\"\"\n    Create a sink.\n\n    Args:\n        project_id (str): Project ID\n        sink_name (str): Sink name. Example: 'my-sink'\n        filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n        destination (dict): Destination. Example: {'writer_identity': 'serviceAccount:\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    sink = self.client.sink(sink_name, filter_=filter_str, destination=destination)\n    sink.create()\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.delete_exclusion","title":"<code>delete_exclusion(project_id, exclusion_name)</code>","text":"<p>Delete an exclusion.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>exclusion_name</code> <code>str</code> <p>Exclusion name. Example: 'my-exclusion'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def delete_exclusion(self, project_id, exclusion_name):\n    \"\"\"\n    Delete an exclusion.\n\n    Args:\n        project_id (str): Project ID\n        exclusion_name (str): Exclusion name. Example: 'my-exclusion'\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    exclusion = self.client.exclusion(exclusion_name)\n    exclusion.delete()\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.delete_log","title":"<code>delete_log(project_id, log_name)</code>","text":"<p>Delete a log.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>log_name</code> <code>str</code> <p>Log name. Example: 'my-log'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def delete_log(self, project_id, log_name):\n    \"\"\"\n    Delete a log.\n\n    Args:\n        project_id (str): Project ID\n        log_name (str): Log name. Example: 'my-log'\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    logger = self.client.logger(log_name)\n    logger.delete()\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.delete_log_entries","title":"<code>delete_log_entries(project_id, filter_str=None)</code>","text":"<p>Delete log entries.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>filter_str</code> <code>str</code> <p>Filter string. Example: 'resource.type=\"bigquery_resource\"'</p> <code>None</code> <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def delete_log_entries(self, project_id, filter_str=None):\n    \"\"\"\n    Delete log entries.\n\n    Args:\n        project_id (str): Project ID\n        filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    entries = self.client.list_entries(project_id=project_id, filter_=filter_str)\n    for entry in entries:\n        entry.delete()\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.delete_many_exclusions","title":"<code>delete_many_exclusions(project_id)</code>","text":"<p>Delete multiple exclusions.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def delete_many_exclusions(self, project_id):\n    \"\"\"\n    Delete multiple exclusions.\n\n    Args:\n        project_id (str): Project ID\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    exclusions = self.client.list_exclusions(project_id=project_id)\n    for exclusion in exclusions:\n        exclusion.delete()\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.delete_many_log_entries","title":"<code>delete_many_log_entries(project_id, filter_str=None)</code>","text":"<p>Delete multiple log entries.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>filter_str</code> <code>str</code> <p>Filter string. Example: 'resource.type=\"bigquery_resource\"'</p> <code>None</code> <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def delete_many_log_entries(self, project_id, filter_str=None):\n    \"\"\"\n    Delete multiple log entries.\n\n    Args:\n        project_id (str): Project ID\n        filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    entries = self.client.list_entries(project_id=project_id, filter_=filter_str)\n    for entry in entries:\n        entry.delete()\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.delete_many_logs","title":"<code>delete_many_logs(project_id, filter_str=None)</code>","text":"<p>Delete multiple logs.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>filter_str</code> <code>str</code> <p>Filter string. Example: 'resource.type=\"bigquery_resource\"'</p> <code>None</code> <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def delete_many_logs(self, project_id, filter_str=None):\n    \"\"\"\n    Delete multiple logs.\n\n    Args:\n        project_id (str): Project ID\n        filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    logs = self.client.list_logs(project_id=project_id, filter_=filter_str)\n    for log in logs:\n        log.delete()\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.delete_many_sinks","title":"<code>delete_many_sinks(project_id)</code>","text":"<p>Delete multiple sinks.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def delete_many_sinks(self, project_id):\n    \"\"\"\n    Delete multiple sinks.\n\n    Args:\n        project_id (str): Project ID\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    sinks = self.client.list_sinks(project_id=project_id)\n    for sink in sinks:\n        sink.delete()\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.delete_sink","title":"<code>delete_sink(project_id, sink_name)</code>","text":"<p>Delete a sink.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>sink_name</code> <code>str</code> <p>Sink name. Example: 'my-sink'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def delete_sink(self, project_id, sink_name):\n    \"\"\"\n    Delete a sink.\n\n    Args:\n        project_id (str): Project ID\n        sink_name (str): Sink name. Example: 'my-sink'\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    sink = self.client.sink(sink_name)\n    sink.delete()\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.get_exclusion","title":"<code>get_exclusion(project_id, exclusion_name)</code>","text":"<p>Get an exclusion.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>exclusion_name</code> <code>str</code> <p>Exclusion name. Example: 'my-exclusion'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>dict</code> <p>Exclusion</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def get_exclusion(self, project_id, exclusion_name):\n    \"\"\"\n    Get an exclusion.\n\n    Args:\n        project_id (str): Project ID\n        exclusion_name (str): Exclusion name. Example: 'my-exclusion'\n\n    Returns:\n        result (dict): Exclusion\n    \"\"\"\n    exclusion = self.client.exclusion(exclusion_name)\n    return exclusion\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.get_logs_based_metric","title":"<code>get_logs_based_metric(project_id, metric_name)</code>","text":"<p>Get a logs-based metric.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>metric_name</code> <code>str</code> <p>Metric name. Example: 'my-metric'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>dict</code> <p>Logs-based metric</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def get_logs_based_metric(self, project_id, metric_name):\n    \"\"\"\n    Get a logs-based metric.\n\n    Args:\n        project_id (str): Project ID\n        metric_name (str): Metric name. Example: 'my-metric'\n\n    Returns:\n        result (dict): Logs-based metric\n    \"\"\"\n    metric = self.client.logs_based_metric(metric_name)\n    return metric\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.get_metric_descriptor","title":"<code>get_metric_descriptor(project_id, descriptor_name)</code>","text":"<p>Get a metric descriptor.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>descriptor_name</code> <code>str</code> <p>Descriptor name. Example: 'my-descriptor'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>dict</code> <p>Metric descriptor</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def get_metric_descriptor(self, project_id, descriptor_name):\n    \"\"\"\n    Get a metric descriptor.\n\n    Args:\n        project_id (str): Project ID\n        descriptor_name (str): Descriptor name. Example: 'my-descriptor'\n\n    Returns:\n        result (dict): Metric descriptor\n    \"\"\"\n    descriptor = self.client.metric_descriptor(descriptor_name)\n    return descriptor\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.get_monitored_resource_descriptor","title":"<code>get_monitored_resource_descriptor(project_id, descriptor_name)</code>","text":"<p>Get a monitored resource descriptor.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>descriptor_name</code> <code>str</code> <p>Descriptor name. Example: 'my-descriptor'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>dict</code> <p>Monitored resource descriptor</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def get_monitored_resource_descriptor(self, project_id, descriptor_name):\n    \"\"\"\n    Get a monitored resource descriptor.\n\n    Args:\n        project_id (str): Project ID\n        descriptor_name (str): Descriptor name. Example: 'my-descriptor'\n\n    Returns:\n        result (dict): Monitored resource descriptor\n    \"\"\"\n    descriptor = self.client.monitored_resource_descriptor(descriptor_name)\n    return descriptor\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.get_sink","title":"<code>get_sink(project_id, sink_name)</code>","text":"<p>Get a sink.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>sink_name</code> <code>str</code> <p>Sink name. Example: 'my-sink'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>dict</code> <p>Sink</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def get_sink(self, project_id, sink_name):\n    \"\"\"\n    Get a sink.\n\n    Args:\n        project_id (str): Project ID\n        sink_name (str): Sink name. Example: 'my-sink'\n\n    Returns:\n        result (dict): Sink\n    \"\"\"\n    sink = self.client.sink(sink_name)\n    return sink\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.list_entries","title":"<code>list_entries(project_id, filter_str=None)</code>","text":"<p>List log entries in a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>filter_str</code> <code>str</code> <p>Filter string. Example: 'resource.type=\"bigquery_resource\"'</p> <code>None</code> <p>Returns:</p> Name Type Description <code>result</code> <code>list</code> <p>List of log entries</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def list_entries(self, project_id, filter_str=None):\n    \"\"\"\n    List log entries in a project.\n\n    Args:\n        project_id (str): Project ID\n        filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n\n    Returns:\n        result (list): List of log entries\n    \"\"\"\n    entries = self.client.list_entries(project_id=project_id, filter_=filter_str)\n    return entries\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.list_exclusions","title":"<code>list_exclusions(project_id)</code>","text":"<p>List exclusions in a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>list</code> <p>List of exclusions</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def list_exclusions(self, project_id):\n    \"\"\"\n    List exclusions in a project.\n\n    Args:\n        project_id (str): Project ID\n\n    Returns:\n        result (list): List of exclusions\n    \"\"\"\n    exclusions = self.client.list_exclusions(project_id=project_id)\n    return exclusions\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.list_logs","title":"<code>list_logs(project_id, filter_str=None)</code>","text":"<p>List logs in a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>filter_str</code> <code>str</code> <p>Filter string. Example: 'resource.type=\"bigquery_resource\"'</p> <code>None</code> <p>Returns:</p> Name Type Description <code>result</code> <code>list</code> <p>List of logs</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def list_logs(self, project_id, filter_str=None):\n    \"\"\"\n    List logs in a project.\n\n    Args:\n        project_id (str): Project ID\n        filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n\n    Returns:\n        result (list): List of logs\n    \"\"\"\n    logs = self.client.list_logs(project_id=project_id, filter_=filter_str)\n    return logs\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.list_logs_based_metrics","title":"<code>list_logs_based_metrics(project_id)</code>","text":"<p>List logs-based metrics in a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>list</code> <p>List of logs-based metrics</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def list_logs_based_metrics(self, project_id):\n    \"\"\"\n    List logs-based metrics in a project.\n\n    Args:\n        project_id (str): Project ID\n\n    Returns:\n        result (list): List of logs-based metrics\n    \"\"\"\n    metrics = self.client.list_logs_based_metrics(project_id=project_id)\n    return metrics\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.list_metric_descriptors","title":"<code>list_metric_descriptors(project_id)</code>","text":"<p>List metric descriptors in a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>list</code> <p>List of metric descriptors</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def list_metric_descriptors(self, project_id):\n    \"\"\"\n    List metric descriptors in a project.\n\n    Args:\n        project_id (str): Project ID\n\n    Returns:\n        result (list): List of metric descriptors\n    \"\"\"\n    descriptors = self.client.list_metric_descriptors(project_id=project_id)\n    return descriptors\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.list_monitored_resource_descriptors","title":"<code>list_monitored_resource_descriptors(project_id)</code>","text":"<p>List monitored resource descriptors in a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>list</code> <p>List of monitored resource descriptors</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def list_monitored_resource_descriptors(self, project_id):\n    \"\"\"\n    List monitored resource descriptors in a project.\n\n    Args:\n        project_id (str): Project ID\n\n    Returns:\n        result (list): List of monitored resource descriptors\n    \"\"\"\n    descriptors = self.client.list_monitored_resource_descriptors(project_id=project_id)\n    return descriptors\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.list_sinks","title":"<code>list_sinks(project_id)</code>","text":"<p>List sinks in a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>list</code> <p>List of sinks</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def list_sinks(self, project_id):\n    \"\"\"\n    List sinks in a project.\n\n    Args:\n        project_id (str): Project ID\n\n    Returns:\n        result (list): List of sinks\n    \"\"\"\n    sinks = self.client.list_sinks(project_id=project_id)\n    return sinks\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.update_exclusion","title":"<code>update_exclusion(project_id, exclusion_name, filter_str)</code>","text":"<p>Update an exclusion.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>exclusion_name</code> <code>str</code> <p>Exclusion name. Example: 'my-exclusion'</p> required <code>filter_str</code> <code>str</code> <p>Filter string. Example: 'resource.type=\"bigquery_resource\"'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def update_exclusion(self, project_id, exclusion_name, filter_str):\n    \"\"\"\n    Update an exclusion.\n\n    Args:\n        project_id (str): Project ID\n        exclusion_name (str): Exclusion name. Example: 'my-exclusion'\n        filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    exclusion = self.client.exclusion(exclusion_name, filter_=filter_str)\n    exclusion.update()\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.update_sink","title":"<code>update_sink(project_id, sink_name, filter_str, destination)</code>","text":"<p>Update a sink.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>sink_name</code> <code>str</code> <p>Sink name. Example: 'my-sink'</p> required <code>filter_str</code> <code>str</code> <p>Filter string. Example: 'resource.type=\"bigquery_resource\"'</p> required <code>destination</code> <code>dict</code> <p>Destination. Example: {'writer_identity': 'serviceAccount:</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def update_sink(self, project_id, sink_name, filter_str, destination):\n    \"\"\"\n    Update a sink.\n\n    Args:\n        project_id (str): Project ID\n        sink_name (str): Sink name. Example: 'my-sink'\n        filter_str (str): Filter string. Example: 'resource.type=\"bigquery_resource\"'\n        destination (dict): Destination. Example: {'writer_identity': 'serviceAccount:\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    sink = self.client.sink(sink_name, filter_=filter_str, destination=destination)\n    sink.update()\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-logging/#honeydew.gcp_logging.GcpLogging.write_log","title":"<code>write_log(project_id, log_name, resource, labels, text_payload=None, json_payload=None)</code>","text":"<p>Write a log entry.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>log_name</code> <code>str</code> <p>Log name. Example: 'my-log'</p> required <code>resource</code> <code>dict</code> <p>Resource. Example: {'type': 'global'}</p> required <code>labels</code> <code>dict</code> <p>Labels. Example: {'env': 'dev', 'app': 'my-app'}</p> required <code>text_payload</code> <code>str</code> <p>Text payload. Example: 'my log message'</p> <code>None</code> <code>json_payload</code> <code>dict</code> <p>JSON payload. Example: {'message': 'my log message'}</p> <code>None</code> <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_logging.py</code> Python<pre><code>def write_log(self, project_id, log_name, resource, labels, text_payload=None, json_payload=None):\n    \"\"\"\n    Write a log entry.\n\n    Args:\n        project_id (str): Project ID\n        log_name (str): Log name. Example: 'my-log'\n        resource (dict): Resource. Example: {'type': 'global'}\n        labels (dict): Labels. Example: {'env': 'dev', 'app': 'my-app'}\n        text_payload (str): Text payload. Example: 'my log message'\n        json_payload (dict): JSON payload. Example: {'message': 'my log message'}\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    logger = self.client.logger(log_name)\n    logger.log_text(text_payload, resource=resource, labels=labels)\n    logger.log_struct(json_payload, resource=resource, labels=labels)\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-secretmanager/","title":"GCP Secret Manager Connector","text":""},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager","title":"<code>GcpSecretManager</code>","text":"<p>Instantiate a GCP Secret Manager object.</p> <p>Parameters:</p> Name Type Description Default <code>credential_file</code> <code>str</code> <p>Credential json file</p> required <code>proxy</code> <code>str</code> <p>Proxy address</p> <code>''</code> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>class GcpSecretManager:\n    \"\"\"\n    Instantiate a GCP Secret Manager object.\n\n    Args:\n        credential_file (str): Credential json file\n        proxy (str): Proxy address\n    \"\"\"\n    def __init__(self, credential_file, proxy=''):\n        self.credential_file = credential_file\n        self.proxy = proxy\n        os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = credential_file\n        if proxy != '':\n            os.environ['HTTP_PROXY'] = proxy\n            os.environ['HTTPS_PROXY'] = proxy\n        self.credentials, self.project = google.auth.load_credentials_from_file(credential_file)\n\n    def list_secret(self, project_id):\n        \"\"\"\n        List all secrets in a project.\n\n        Args:\n            project_id (str): Project ID\n\n        Returns:\n            secret_list (list): List of secrets\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        parent = f\"projects/{project_id}\"\n        secrets = client.list_secrets(request={\"parent\": parent})\n        results = []\n        secret_list = []\n        for secret in secrets:\n            secret_list.append(secret.name)\n        return secret_list\n\n    def get_secret(self, project_id, secret_id):\n        \"\"\"\n        Get a secret from a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n\n        Returns:\n            result (str): Secret value\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        name = f\"projects/{project_id}/secrets/{secret_id}/versions/latest\"\n        response = client.access_secret_version(request={\"name\": name})\n        result = response.payload.data.decode(\"UTF-8\")\n        return result\n\n    def get_secret_version(self, project_id, secret_id, secret_version):\n        \"\"\"\n        Get a secret from a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n            secret_version (str): Secret version\n\n        Returns:\n            result (str): Secret value\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        name = f\"projects/{project_id}/secrets/{secret_id}/versions/{secret_version}\"\n        response = client.access_secret_version(request={\"name\": name})\n        result = response.payload.data.decode(\"UTF-8\")\n        return result\n\n    def get_secret_versions(self, project_id, secret_id):\n        \"\"\"\n        Get all secret versions from a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n\n        Returns:\n            secret_list (list): Secret version list\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        name = f\"projects/{project_id}/secrets/{secret_id}\"\n        response = client.list_secret_versions(request={\"parent\": name})\n        result = []\n        version_list = []\n        for version in response:\n            version_list.append(version.name)\n        return version_list\n\n    def get_secret_version_create_time(self, project_id, secret_id, secret_version):\n        \"\"\"\n        Get secret version create time from a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n            secret_version (str): Secret version\n\n        Returns:\n            result (str): Secret version create time\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        name = f\"projects/{project_id}/secrets/{secret_id}/versions/{secret_version}\"\n        response = client.access_secret_version(request={\"name\": name})\n        result = response.create_time\n        return result\n\n    def get_secret_version_state(self, project_id, secret_id, secret_version):\n        \"\"\"\n        Get secret version state from a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n            secret_version (str): Secret version\n\n        Returns:\n            result (str): Secret version state\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        name = f\"projects/{project_id}/secrets/{secret_id}/versions/{secret_version}\"\n        response = client.access_secret_version(request={\"name\": name})\n        result = response.state\n        return result\n\n    def get_secret_version_destroy_time(self, project_id, secret_id, secret_version):\n        \"\"\"\n        Get secret version destroy time from a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n            secret_version (str): Secret version\n\n        Returns:\n            result (str): Secret version destroy time\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        name = f\"projects/{project_id}/secrets/{secret_id}/versions/{secret_version}\"\n        response = client.access_secret_version(request={\"name\": name})\n        result = response.destroy_time\n        return result\n\n    def create_secret(self, project_id, secret_id):\n        \"\"\"\n        Create a secret in a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n\n        Returns:\n            result (str): Secret name\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        parent = f\"projects/{project_id}\"\n        secret = {\"replication\": {\"automatic\": {}}}\n        response = client.create_secret(request={\"parent\": parent, \"secret_id\": secret_id, \"secret\": secret})\n        result = response.name\n        return result\n\n    def add_secret_version(self, project_id, secret_id, payload):\n        \"\"\"\n        Add a secret version in a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n            payload (str): Secret value\n\n        Returns:\n            result (str): Secret version name\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        parent = f\"projects/{project_id}/secrets/{secret_id}\"\n        response = client.add_secret_version(request={\"parent\": parent, \"payload\": {\"data\": payload.encode(\"UTF-8\")}})\n        result = response.name\n        return result\n\n    def delete_secret(self, project_id, secret_id):\n        \"\"\"\n        Delete a secret from a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        name = f\"projects/{project_id}/secrets/{secret_id}\"\n        client.delete_secret(request={\"name\": name})\n        result = 'OK'\n        return result\n\n    def destroy_secret_version(self, project_id, secret_id, secret_version):\n        \"\"\"\n        Destroy a secret version from a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n            secret_version (str): Secret version\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        name = f\"projects/{project_id}/secrets/{secret_id}/versions/{secret_version}\"\n        client.destroy_secret_version(request={\"name\": name})\n        result = 'OK'\n        return result\n\n    def disable_secret_version(self, project_id, secret_id, secret_version):\n        \"\"\"\n        Disable a secret version from a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n            secret_version (str): Secret version\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        name = f\"projects/{project_id}/secrets/{secret_id}/versions/{secret_version}\"\n        client.disable_secret_version(request={\"name\": name})\n        result = 'OK'\n        return result\n\n    def enable_secret_version(self, project_id, secret_id, secret_version):\n        \"\"\"\n        Enable a secret version from a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n            secret_version (str): Secret version\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        name = f\"projects/{project_id}/secrets/{secret_id}/versions/{secret_version}\"\n        client.enable_secret_version(request={\"name\": name})\n        result = 'OK'\n        return result\n\n    def get_secret_policy(self, project_id, secret_id):\n        \"\"\"\n        Get a secret policy from a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n\n        Returns:\n            result (str): Secret policy\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        name = f\"projects/{project_id}/secrets/{secret_id}\"\n        response = client.get_iam_policy(request={\"resource\": name})\n        result = response\n        return result\n\n    def set_secret_policy(self, project_id, secret_id, member, role):\n        \"\"\"\n        Set a secret policy from a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n            member (str): Member\n            role (str): Role\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        name = f\"projects/{project_id}/secrets/{secret_id}\"\n        policy = {\"bindings\": [{\"role\": role, \"members\": [member]}]}\n        response = client.set_iam_policy(request={\"resource\": name, \"policy\": policy})\n        result = 'OK'\n        return result\n\n    def test_iam_permissions(self, project_id, secret_id, permissions):\n        \"\"\"\n        Test a secret policy from a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n            permissions (list): Permissions\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        name = f\"projects/{project_id}/secrets/{secret_id}\"\n        response = client.test_iam_permissions(request={\"resource\": name, \"permissions\": permissions})\n        result = response\n        return result\n\n    def add_secret_version_from_file(self, project_id, secret_id, file_path):\n        \"\"\"\n        Add a secret version from a file in a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n            file_path (str): File path\n\n        Returns:\n            result (str): Secret version name\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        parent = f\"projects/{project_id}/secrets/{secret_id}\"\n        with open(file_path, \"rb\") as f:\n            payload = {\"data\": f.read()}\n        response = client.add_secret_version(request={\"parent\": parent, \"payload\": payload})\n        result = response.name\n        return result\n\n    def add_secret_version_from_string(self, project_id, secret_id, payload):\n        \"\"\"\n        Add a secret version from a string in a project.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n            payload (str): Secret value\n\n        Returns:\n            result (str): Secret version name\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        parent = f\"projects/{project_id}/secrets/{secret_id}\"\n        response = client.add_secret_version(request={\"parent\": parent, \"payload\": {\"data\": payload.encode(\"UTF-8\")}})\n        result = response.name\n        return result\n\n    def get_secret_version_to_file(self, project_id, secret_id, secret_version, file_path):\n        \"\"\"\n        Get a secret version in a project and store it in a file.\n\n        Args:\n            project_id (str): Project ID\n            secret_id (str): Secret ID\n            secret_version (str): Secret version\n            file_path (str): File path\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n        name = f\"projects/{project_id}/secrets/{secret_id}/versions/{secret_version}\"\n        response = client.access_secret_version(request={\"name\": name})\n        with open(file_path, \"wb\") as f:\n            f.write(response.payload.data)\n        result = 'OK'\n        return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.add_secret_version","title":"<code>add_secret_version(project_id, secret_id, payload)</code>","text":"<p>Add a secret version in a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <code>payload</code> <code>str</code> <p>Secret value</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Secret version name</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def add_secret_version(self, project_id, secret_id, payload):\n    \"\"\"\n    Add a secret version in a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n        payload (str): Secret value\n\n    Returns:\n        result (str): Secret version name\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    parent = f\"projects/{project_id}/secrets/{secret_id}\"\n    response = client.add_secret_version(request={\"parent\": parent, \"payload\": {\"data\": payload.encode(\"UTF-8\")}})\n    result = response.name\n    return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.add_secret_version_from_file","title":"<code>add_secret_version_from_file(project_id, secret_id, file_path)</code>","text":"<p>Add a secret version from a file in a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <code>file_path</code> <code>str</code> <p>File path</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Secret version name</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def add_secret_version_from_file(self, project_id, secret_id, file_path):\n    \"\"\"\n    Add a secret version from a file in a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n        file_path (str): File path\n\n    Returns:\n        result (str): Secret version name\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    parent = f\"projects/{project_id}/secrets/{secret_id}\"\n    with open(file_path, \"rb\") as f:\n        payload = {\"data\": f.read()}\n    response = client.add_secret_version(request={\"parent\": parent, \"payload\": payload})\n    result = response.name\n    return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.add_secret_version_from_string","title":"<code>add_secret_version_from_string(project_id, secret_id, payload)</code>","text":"<p>Add a secret version from a string in a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <code>payload</code> <code>str</code> <p>Secret value</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Secret version name</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def add_secret_version_from_string(self, project_id, secret_id, payload):\n    \"\"\"\n    Add a secret version from a string in a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n        payload (str): Secret value\n\n    Returns:\n        result (str): Secret version name\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    parent = f\"projects/{project_id}/secrets/{secret_id}\"\n    response = client.add_secret_version(request={\"parent\": parent, \"payload\": {\"data\": payload.encode(\"UTF-8\")}})\n    result = response.name\n    return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.create_secret","title":"<code>create_secret(project_id, secret_id)</code>","text":"<p>Create a secret in a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Secret name</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def create_secret(self, project_id, secret_id):\n    \"\"\"\n    Create a secret in a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n\n    Returns:\n        result (str): Secret name\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    parent = f\"projects/{project_id}\"\n    secret = {\"replication\": {\"automatic\": {}}}\n    response = client.create_secret(request={\"parent\": parent, \"secret_id\": secret_id, \"secret\": secret})\n    result = response.name\n    return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.delete_secret","title":"<code>delete_secret(project_id, secret_id)</code>","text":"<p>Delete a secret from a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def delete_secret(self, project_id, secret_id):\n    \"\"\"\n    Delete a secret from a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    name = f\"projects/{project_id}/secrets/{secret_id}\"\n    client.delete_secret(request={\"name\": name})\n    result = 'OK'\n    return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.destroy_secret_version","title":"<code>destroy_secret_version(project_id, secret_id, secret_version)</code>","text":"<p>Destroy a secret version from a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <code>secret_version</code> <code>str</code> <p>Secret version</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def destroy_secret_version(self, project_id, secret_id, secret_version):\n    \"\"\"\n    Destroy a secret version from a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n        secret_version (str): Secret version\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    name = f\"projects/{project_id}/secrets/{secret_id}/versions/{secret_version}\"\n    client.destroy_secret_version(request={\"name\": name})\n    result = 'OK'\n    return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.disable_secret_version","title":"<code>disable_secret_version(project_id, secret_id, secret_version)</code>","text":"<p>Disable a secret version from a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <code>secret_version</code> <code>str</code> <p>Secret version</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def disable_secret_version(self, project_id, secret_id, secret_version):\n    \"\"\"\n    Disable a secret version from a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n        secret_version (str): Secret version\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    name = f\"projects/{project_id}/secrets/{secret_id}/versions/{secret_version}\"\n    client.disable_secret_version(request={\"name\": name})\n    result = 'OK'\n    return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.enable_secret_version","title":"<code>enable_secret_version(project_id, secret_id, secret_version)</code>","text":"<p>Enable a secret version from a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <code>secret_version</code> <code>str</code> <p>Secret version</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def enable_secret_version(self, project_id, secret_id, secret_version):\n    \"\"\"\n    Enable a secret version from a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n        secret_version (str): Secret version\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    name = f\"projects/{project_id}/secrets/{secret_id}/versions/{secret_version}\"\n    client.enable_secret_version(request={\"name\": name})\n    result = 'OK'\n    return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.get_secret","title":"<code>get_secret(project_id, secret_id)</code>","text":"<p>Get a secret from a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Secret value</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def get_secret(self, project_id, secret_id):\n    \"\"\"\n    Get a secret from a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n\n    Returns:\n        result (str): Secret value\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    name = f\"projects/{project_id}/secrets/{secret_id}/versions/latest\"\n    response = client.access_secret_version(request={\"name\": name})\n    result = response.payload.data.decode(\"UTF-8\")\n    return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.get_secret_policy","title":"<code>get_secret_policy(project_id, secret_id)</code>","text":"<p>Get a secret policy from a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Secret policy</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def get_secret_policy(self, project_id, secret_id):\n    \"\"\"\n    Get a secret policy from a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n\n    Returns:\n        result (str): Secret policy\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    name = f\"projects/{project_id}/secrets/{secret_id}\"\n    response = client.get_iam_policy(request={\"resource\": name})\n    result = response\n    return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.get_secret_version","title":"<code>get_secret_version(project_id, secret_id, secret_version)</code>","text":"<p>Get a secret from a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <code>secret_version</code> <code>str</code> <p>Secret version</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Secret value</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def get_secret_version(self, project_id, secret_id, secret_version):\n    \"\"\"\n    Get a secret from a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n        secret_version (str): Secret version\n\n    Returns:\n        result (str): Secret value\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    name = f\"projects/{project_id}/secrets/{secret_id}/versions/{secret_version}\"\n    response = client.access_secret_version(request={\"name\": name})\n    result = response.payload.data.decode(\"UTF-8\")\n    return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.get_secret_version_create_time","title":"<code>get_secret_version_create_time(project_id, secret_id, secret_version)</code>","text":"<p>Get secret version create time from a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <code>secret_version</code> <code>str</code> <p>Secret version</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Secret version create time</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def get_secret_version_create_time(self, project_id, secret_id, secret_version):\n    \"\"\"\n    Get secret version create time from a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n        secret_version (str): Secret version\n\n    Returns:\n        result (str): Secret version create time\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    name = f\"projects/{project_id}/secrets/{secret_id}/versions/{secret_version}\"\n    response = client.access_secret_version(request={\"name\": name})\n    result = response.create_time\n    return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.get_secret_version_destroy_time","title":"<code>get_secret_version_destroy_time(project_id, secret_id, secret_version)</code>","text":"<p>Get secret version destroy time from a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <code>secret_version</code> <code>str</code> <p>Secret version</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Secret version destroy time</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def get_secret_version_destroy_time(self, project_id, secret_id, secret_version):\n    \"\"\"\n    Get secret version destroy time from a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n        secret_version (str): Secret version\n\n    Returns:\n        result (str): Secret version destroy time\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    name = f\"projects/{project_id}/secrets/{secret_id}/versions/{secret_version}\"\n    response = client.access_secret_version(request={\"name\": name})\n    result = response.destroy_time\n    return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.get_secret_version_state","title":"<code>get_secret_version_state(project_id, secret_id, secret_version)</code>","text":"<p>Get secret version state from a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <code>secret_version</code> <code>str</code> <p>Secret version</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Secret version state</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def get_secret_version_state(self, project_id, secret_id, secret_version):\n    \"\"\"\n    Get secret version state from a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n        secret_version (str): Secret version\n\n    Returns:\n        result (str): Secret version state\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    name = f\"projects/{project_id}/secrets/{secret_id}/versions/{secret_version}\"\n    response = client.access_secret_version(request={\"name\": name})\n    result = response.state\n    return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.get_secret_version_to_file","title":"<code>get_secret_version_to_file(project_id, secret_id, secret_version, file_path)</code>","text":"<p>Get a secret version in a project and store it in a file.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <code>secret_version</code> <code>str</code> <p>Secret version</p> required <code>file_path</code> <code>str</code> <p>File path</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def get_secret_version_to_file(self, project_id, secret_id, secret_version, file_path):\n    \"\"\"\n    Get a secret version in a project and store it in a file.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n        secret_version (str): Secret version\n        file_path (str): File path\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    name = f\"projects/{project_id}/secrets/{secret_id}/versions/{secret_version}\"\n    response = client.access_secret_version(request={\"name\": name})\n    with open(file_path, \"wb\") as f:\n        f.write(response.payload.data)\n    result = 'OK'\n    return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.get_secret_versions","title":"<code>get_secret_versions(project_id, secret_id)</code>","text":"<p>Get all secret versions from a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <p>Returns:</p> Name Type Description <code>secret_list</code> <code>list</code> <p>Secret version list</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def get_secret_versions(self, project_id, secret_id):\n    \"\"\"\n    Get all secret versions from a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n\n    Returns:\n        secret_list (list): Secret version list\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    name = f\"projects/{project_id}/secrets/{secret_id}\"\n    response = client.list_secret_versions(request={\"parent\": name})\n    result = []\n    version_list = []\n    for version in response:\n        version_list.append(version.name)\n    return version_list\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.list_secret","title":"<code>list_secret(project_id)</code>","text":"<p>List all secrets in a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <p>Returns:</p> Name Type Description <code>secret_list</code> <code>list</code> <p>List of secrets</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def list_secret(self, project_id):\n    \"\"\"\n    List all secrets in a project.\n\n    Args:\n        project_id (str): Project ID\n\n    Returns:\n        secret_list (list): List of secrets\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    parent = f\"projects/{project_id}\"\n    secrets = client.list_secrets(request={\"parent\": parent})\n    results = []\n    secret_list = []\n    for secret in secrets:\n        secret_list.append(secret.name)\n    return secret_list\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.set_secret_policy","title":"<code>set_secret_policy(project_id, secret_id, member, role)</code>","text":"<p>Set a secret policy from a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <code>member</code> <code>str</code> <p>Member</p> required <code>role</code> <code>str</code> <p>Role</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def set_secret_policy(self, project_id, secret_id, member, role):\n    \"\"\"\n    Set a secret policy from a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n        member (str): Member\n        role (str): Role\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    name = f\"projects/{project_id}/secrets/{secret_id}\"\n    policy = {\"bindings\": [{\"role\": role, \"members\": [member]}]}\n    response = client.set_iam_policy(request={\"resource\": name, \"policy\": policy})\n    result = 'OK'\n    return result\n</code></pre>"},{"location":"gcp-secretmanager/#honeydew.gcp_secretmanager.GcpSecretManager.test_iam_permissions","title":"<code>test_iam_permissions(project_id, secret_id, permissions)</code>","text":"<p>Test a secret policy from a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>secret_id</code> <code>str</code> <p>Secret ID</p> required <code>permissions</code> <code>list</code> <p>Permissions</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_secretmanager.py</code> Python<pre><code>def test_iam_permissions(self, project_id, secret_id, permissions):\n    \"\"\"\n    Test a secret policy from a project.\n\n    Args:\n        project_id (str): Project ID\n        secret_id (str): Secret ID\n        permissions (list): Permissions\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    client = secretmanager.SecretManagerServiceClient(credentials=self.credentials)\n    name = f\"projects/{project_id}/secrets/{secret_id}\"\n    response = client.test_iam_permissions(request={\"resource\": name, \"permissions\": permissions})\n    result = response\n    return result\n</code></pre>"},{"location":"gcp-storage/","title":"GCP Cloud Storage Connector","text":""},{"location":"gcp-storage/#honeydew.gcp_storage.GcpCloudStorage","title":"<code>GcpCloudStorage</code>","text":"<p>Instantiate a GCS connector. Args:     credential_file (str): Credential json file     proxy (str): Proxy address</p> Source code in <code>honeydew/gcp_storage.py</code> Python<pre><code>class GcpCloudStorage:\n    \"\"\"\n    Instantiate a GCS connector.\n    Args:\n        credential_file (str): Credential json file\n        proxy (str): Proxy address\n    \"\"\"\n    def __init__(self, credential_file, proxy=''):\n        self.credential_file = credential_file\n        self.proxy = proxy\n        os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = credential_file\n        if proxy != '':\n            os.environ['HTTP_PROXY'] = proxy\n            os.environ['HTTPS_PROXY'] = proxy\n\n    def download_blob(self, project_id, bucket_id, source_blob_path, destination_path):\n        \"\"\"\n        Download a single object from Google Cloud Storage (GCS).\n\n        Args:\n            project_id (str): Project ID\n            bucket_id (str): Bucket ID\n            source_blob_path (str): The path of source object. Example: 'gcs-directory/my-filename.txt'\n            destination_path (str): Local destination path. Example: '/my-directory/my-filename.txt'\n\n        Returns:\n            result (result): Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result\n        \"\"\"\n        gcs_client = storage.Client(project=project_id)\n        bucket = gcs_client.bucket(bucket_id)\n        blob = bucket.blob(source_blob_path)\n        blob.download_to_filename(destination_path)\n        results = 'OK'\n        return results    \n\n    def download_many_blobs(self, project_id, bucket_id, blob_prefix, destination_dir_path, printout=True):\n        \"\"\"\n        Download multiple objects which have same prefix pattern from Google Cloud Storage (GCS).\n\n        Args:\n            project_id (str): Project ID\n            bucket_id (str): Bucket ID\n            blob_prefix (str): The blob prefix pattern that wil be downloaded. Example: 'gcs-directory/tickets-20220101-'\n            destination_dir_path (str): Local destination directory path. Example: '/my-directory'\n            printout (boolean): File name will be displayed if this value is true. Default: True\n\n        Returns:\n            result (str): It returns 'OK' when successful            \n        \"\"\"\n\n        delimiter='/'\n        storage_client = storage.Client(project_id)\n        bucket=storage_client.get_bucket(bucket_id)\n        # List blobs iterate in folder \n        blobs=bucket.list_blobs(prefix=blob_prefix, delimiter=delimiter) # Excluding folder inside bucket\n        for blob in blobs:\n            if printout == True:\n                print(blob.name)\n            filename_raw = blob.name.split('/')\n            filename = filename_raw[len(filename_raw)-1]\n            destination_uri = '{}{}'.format(destination_dir_path, filename) \n            blob.download_to_filename(destination_uri)\n        results = 'OK'   \n        return results\n\n    def upload_blob(self, project_id, bucket_id, local_file, destination_blob):\n        \"\"\"\n        Upload a single object from Google Cloud Storage (GCS).\n\n        Args:\n            project_id (str): Project ID\n            bucket_id (str): Bucket ID\n            local_file (str): Local file as source. Example: '/local-directory/my-filename.txt'\n            destination_blob (str): Destination blob in GCS bucket. Example: 'gcs-directory/my-filename.txt'\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        gcs_client = storage.Client(project=project_id)\n        bucket = gcs_client.bucket(bucket_id)\n        blob = bucket.blob(destination_blob)\n        blob.upload_from_filename(local_file)\n        results = 'OK'\n        return results          \n\n    def upload_many_blobs(self, project_id, bucket_id, local_dir, destination_dir):\n        \"\"\"\n        Upload multiple objects to Google Cloud Storage (GCS).\n\n        Args:\n            project_id (str): Project ID\n            bucket_id (str): Bucket ID\n            local_dir (str): Local directory as source. Example: '/local-directory'\n            destination_dir (str): Destination directory in GCS bucket. Example: 'gcs-directory'\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        gcs_client = storage.Client(project=project_id)\n        bucket = gcs_client.bucket(bucket_id)\n        for filename in os.listdir(local_dir):\n            blob = bucket.blob(f'{destination_dir}/{filename}')\n            blob.upload_from_filename(f'{local_dir}/{filename}')\n        results = 'OK'\n        return results\n\n    def delete_blob(self, project_id, bucket_id, blob_name):\n        \"\"\"\n        Delete a single object from Google Cloud Storage (GCS).\n\n        Args:\n            project_id (str): Project ID\n            bucket_id (str): Bucket ID\n            blob_name (str): Blob name. Example: 'gcs-directory/my-filename.txt'\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        gcs_client = storage.Client(project=project_id)\n        bucket = gcs_client.bucket(bucket_id)\n        blob = bucket.blob(blob_name)\n        blob.delete()\n        results = 'OK'\n        return results\n\n    def delete_many_blobs(self, project_id, bucket_id, blob_prefix):\n        \"\"\"\n        Delete multiple objects from Google Cloud Storage (GCS).\n\n        Args:\n            project_id (str): Project ID\n            bucket_id (str): Bucket ID\n            blob_prefix (str): Blob prefix. Example: 'gcs-directory/my-filename.txt'\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        delimiter='/'\n        storage_client = storage.Client(project_id)\n        bucket=storage_client.get_bucket(bucket_id)\n        # List blobs iterate in folder \n        blobs=bucket.list_blobs(prefix=blob_prefix, delimiter=delimiter)\n        for blob in blobs:\n            blob.delete()\n        results = 'OK'\n        return results\n\n    def list_blobs(self, project_id, bucket_id, blob_prefix):\n        \"\"\"\n        List objects from Google Cloud Storage (GCS).\n\n        Args:\n            project_id (str): Project ID\n            bucket_id (str): Bucket ID\n            blob_prefix (str): Blob prefix. Example: 'gcs-directory/my-filename.txt'\n\n        Returns:\n            blob_list (list): Blob list\n        \"\"\"\n        delimiter='/'\n        storage_client = storage.Client(project_id)\n        bucket=storage_client.get_bucket(bucket_id)\n        # List blobs iterate in folder \n        blobs=bucket.list_blobs(prefix=blob_prefix, delimiter=delimiter)\n        blob_list = []\n        for blob in blobs:\n            blob_list.append(blob.name)\n        results = 'OK'\n        return blob_list\n\n    def copy_blob_between_buckets(self, project_id, source_bucket_id, destination_bucket_id, blob_name):\n        \"\"\"\n        Copy a single object between buckets in Google Cloud Storage (GCS).\n\n        Args:\n            project_id (str): Project ID\n            source_bucket_id (str): Source bucket ID\n            destination_bucket_id (str): Destination bucket ID\n            blob_name (str): Blob name. Example: 'gcs-directory/my-filename.txt'\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        gcs_client = storage.Client(project=project_id)\n        source_bucket = gcs_client.bucket(source_bucket_id)\n        destination_bucket = gcs_client.bucket(destination_bucket_id)\n        blob = source_bucket.blob(blob_name)\n        new_blob = source_bucket.copy_blob(blob, destination_bucket, blob_name)\n        results = 'OK'\n        return results\n\n    def copy_many_blobs_between_buckets(self, project_id, source_bucket_id, destination_bucket_id, blob_prefix):\n        \"\"\"\n        Copy multiple objects between buckets in Google Cloud Storage (GCS).\n\n        Args:\n            project_id (str): Project ID\n            source_bucket_id (str): Source bucket ID\n            destination_bucket_id (str): Destination bucket ID\n            blob_prefix (str): Blob prefix. Example: 'gcs-directory/my-filename.txt'\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        delimiter='/'\n        storage_client = storage.Client(project_id)\n        source_bucket = storage_client.bucket(source_bucket_id)\n        destination_bucket = storage_client.bucket(destination_bucket_id)\n        # List blobs iterate in folder \n        blobs=source_bucket.list_blobs(prefix=blob_prefix, delimiter=delimiter)\n        for blob in blobs:\n            new_blob = source_bucket.copy_blob(blob, destination_bucket, blob.name)\n        results = 'OK'\n        return results\n</code></pre>"},{"location":"gcp-storage/#honeydew.gcp_storage.GcpCloudStorage.copy_blob_between_buckets","title":"<code>copy_blob_between_buckets(project_id, source_bucket_id, destination_bucket_id, blob_name)</code>","text":"<p>Copy a single object between buckets in Google Cloud Storage (GCS).</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>source_bucket_id</code> <code>str</code> <p>Source bucket ID</p> required <code>destination_bucket_id</code> <code>str</code> <p>Destination bucket ID</p> required <code>blob_name</code> <code>str</code> <p>Blob name. Example: 'gcs-directory/my-filename.txt'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_storage.py</code> Python<pre><code>def copy_blob_between_buckets(self, project_id, source_bucket_id, destination_bucket_id, blob_name):\n    \"\"\"\n    Copy a single object between buckets in Google Cloud Storage (GCS).\n\n    Args:\n        project_id (str): Project ID\n        source_bucket_id (str): Source bucket ID\n        destination_bucket_id (str): Destination bucket ID\n        blob_name (str): Blob name. Example: 'gcs-directory/my-filename.txt'\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    gcs_client = storage.Client(project=project_id)\n    source_bucket = gcs_client.bucket(source_bucket_id)\n    destination_bucket = gcs_client.bucket(destination_bucket_id)\n    blob = source_bucket.blob(blob_name)\n    new_blob = source_bucket.copy_blob(blob, destination_bucket, blob_name)\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-storage/#honeydew.gcp_storage.GcpCloudStorage.copy_many_blobs_between_buckets","title":"<code>copy_many_blobs_between_buckets(project_id, source_bucket_id, destination_bucket_id, blob_prefix)</code>","text":"<p>Copy multiple objects between buckets in Google Cloud Storage (GCS).</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>source_bucket_id</code> <code>str</code> <p>Source bucket ID</p> required <code>destination_bucket_id</code> <code>str</code> <p>Destination bucket ID</p> required <code>blob_prefix</code> <code>str</code> <p>Blob prefix. Example: 'gcs-directory/my-filename.txt'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_storage.py</code> Python<pre><code>def copy_many_blobs_between_buckets(self, project_id, source_bucket_id, destination_bucket_id, blob_prefix):\n    \"\"\"\n    Copy multiple objects between buckets in Google Cloud Storage (GCS).\n\n    Args:\n        project_id (str): Project ID\n        source_bucket_id (str): Source bucket ID\n        destination_bucket_id (str): Destination bucket ID\n        blob_prefix (str): Blob prefix. Example: 'gcs-directory/my-filename.txt'\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    delimiter='/'\n    storage_client = storage.Client(project_id)\n    source_bucket = storage_client.bucket(source_bucket_id)\n    destination_bucket = storage_client.bucket(destination_bucket_id)\n    # List blobs iterate in folder \n    blobs=source_bucket.list_blobs(prefix=blob_prefix, delimiter=delimiter)\n    for blob in blobs:\n        new_blob = source_bucket.copy_blob(blob, destination_bucket, blob.name)\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-storage/#honeydew.gcp_storage.GcpCloudStorage.delete_blob","title":"<code>delete_blob(project_id, bucket_id, blob_name)</code>","text":"<p>Delete a single object from Google Cloud Storage (GCS).</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>bucket_id</code> <code>str</code> <p>Bucket ID</p> required <code>blob_name</code> <code>str</code> <p>Blob name. Example: 'gcs-directory/my-filename.txt'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_storage.py</code> Python<pre><code>def delete_blob(self, project_id, bucket_id, blob_name):\n    \"\"\"\n    Delete a single object from Google Cloud Storage (GCS).\n\n    Args:\n        project_id (str): Project ID\n        bucket_id (str): Bucket ID\n        blob_name (str): Blob name. Example: 'gcs-directory/my-filename.txt'\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    gcs_client = storage.Client(project=project_id)\n    bucket = gcs_client.bucket(bucket_id)\n    blob = bucket.blob(blob_name)\n    blob.delete()\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-storage/#honeydew.gcp_storage.GcpCloudStorage.delete_many_blobs","title":"<code>delete_many_blobs(project_id, bucket_id, blob_prefix)</code>","text":"<p>Delete multiple objects from Google Cloud Storage (GCS).</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>bucket_id</code> <code>str</code> <p>Bucket ID</p> required <code>blob_prefix</code> <code>str</code> <p>Blob prefix. Example: 'gcs-directory/my-filename.txt'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_storage.py</code> Python<pre><code>def delete_many_blobs(self, project_id, bucket_id, blob_prefix):\n    \"\"\"\n    Delete multiple objects from Google Cloud Storage (GCS).\n\n    Args:\n        project_id (str): Project ID\n        bucket_id (str): Bucket ID\n        blob_prefix (str): Blob prefix. Example: 'gcs-directory/my-filename.txt'\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    delimiter='/'\n    storage_client = storage.Client(project_id)\n    bucket=storage_client.get_bucket(bucket_id)\n    # List blobs iterate in folder \n    blobs=bucket.list_blobs(prefix=blob_prefix, delimiter=delimiter)\n    for blob in blobs:\n        blob.delete()\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-storage/#honeydew.gcp_storage.GcpCloudStorage.download_blob","title":"<code>download_blob(project_id, bucket_id, source_blob_path, destination_path)</code>","text":"<p>Download a single object from Google Cloud Storage (GCS).</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>bucket_id</code> <code>str</code> <p>Bucket ID</p> required <code>source_blob_path</code> <code>str</code> <p>The path of source object. Example: 'gcs-directory/my-filename.txt'</p> required <code>destination_path</code> <code>str</code> <p>Local destination path. Example: '/my-directory/my-filename.txt'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>result</code> <p>Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result</p> Source code in <code>honeydew/gcp_storage.py</code> Python<pre><code>def download_blob(self, project_id, bucket_id, source_blob_path, destination_path):\n    \"\"\"\n    Download a single object from Google Cloud Storage (GCS).\n\n    Args:\n        project_id (str): Project ID\n        bucket_id (str): Bucket ID\n        source_blob_path (str): The path of source object. Example: 'gcs-directory/my-filename.txt'\n        destination_path (str): Local destination path. Example: '/my-directory/my-filename.txt'\n\n    Returns:\n        result (result): Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result\n    \"\"\"\n    gcs_client = storage.Client(project=project_id)\n    bucket = gcs_client.bucket(bucket_id)\n    blob = bucket.blob(source_blob_path)\n    blob.download_to_filename(destination_path)\n    results = 'OK'\n    return results    \n</code></pre>"},{"location":"gcp-storage/#honeydew.gcp_storage.GcpCloudStorage.download_many_blobs","title":"<code>download_many_blobs(project_id, bucket_id, blob_prefix, destination_dir_path, printout=True)</code>","text":"<p>Download multiple objects which have same prefix pattern from Google Cloud Storage (GCS).</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>bucket_id</code> <code>str</code> <p>Bucket ID</p> required <code>blob_prefix</code> <code>str</code> <p>The blob prefix pattern that wil be downloaded. Example: 'gcs-directory/tickets-20220101-'</p> required <code>destination_dir_path</code> <code>str</code> <p>Local destination directory path. Example: '/my-directory'</p> required <code>printout</code> <code>boolean</code> <p>File name will be displayed if this value is true. Default: True</p> <code>True</code> <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_storage.py</code> Python<pre><code>def download_many_blobs(self, project_id, bucket_id, blob_prefix, destination_dir_path, printout=True):\n    \"\"\"\n    Download multiple objects which have same prefix pattern from Google Cloud Storage (GCS).\n\n    Args:\n        project_id (str): Project ID\n        bucket_id (str): Bucket ID\n        blob_prefix (str): The blob prefix pattern that wil be downloaded. Example: 'gcs-directory/tickets-20220101-'\n        destination_dir_path (str): Local destination directory path. Example: '/my-directory'\n        printout (boolean): File name will be displayed if this value is true. Default: True\n\n    Returns:\n        result (str): It returns 'OK' when successful            \n    \"\"\"\n\n    delimiter='/'\n    storage_client = storage.Client(project_id)\n    bucket=storage_client.get_bucket(bucket_id)\n    # List blobs iterate in folder \n    blobs=bucket.list_blobs(prefix=blob_prefix, delimiter=delimiter) # Excluding folder inside bucket\n    for blob in blobs:\n        if printout == True:\n            print(blob.name)\n        filename_raw = blob.name.split('/')\n        filename = filename_raw[len(filename_raw)-1]\n        destination_uri = '{}{}'.format(destination_dir_path, filename) \n        blob.download_to_filename(destination_uri)\n    results = 'OK'   \n    return results\n</code></pre>"},{"location":"gcp-storage/#honeydew.gcp_storage.GcpCloudStorage.list_blobs","title":"<code>list_blobs(project_id, bucket_id, blob_prefix)</code>","text":"<p>List objects from Google Cloud Storage (GCS).</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>bucket_id</code> <code>str</code> <p>Bucket ID</p> required <code>blob_prefix</code> <code>str</code> <p>Blob prefix. Example: 'gcs-directory/my-filename.txt'</p> required <p>Returns:</p> Name Type Description <code>blob_list</code> <code>list</code> <p>Blob list</p> Source code in <code>honeydew/gcp_storage.py</code> Python<pre><code>def list_blobs(self, project_id, bucket_id, blob_prefix):\n    \"\"\"\n    List objects from Google Cloud Storage (GCS).\n\n    Args:\n        project_id (str): Project ID\n        bucket_id (str): Bucket ID\n        blob_prefix (str): Blob prefix. Example: 'gcs-directory/my-filename.txt'\n\n    Returns:\n        blob_list (list): Blob list\n    \"\"\"\n    delimiter='/'\n    storage_client = storage.Client(project_id)\n    bucket=storage_client.get_bucket(bucket_id)\n    # List blobs iterate in folder \n    blobs=bucket.list_blobs(prefix=blob_prefix, delimiter=delimiter)\n    blob_list = []\n    for blob in blobs:\n        blob_list.append(blob.name)\n    results = 'OK'\n    return blob_list\n</code></pre>"},{"location":"gcp-storage/#honeydew.gcp_storage.GcpCloudStorage.upload_blob","title":"<code>upload_blob(project_id, bucket_id, local_file, destination_blob)</code>","text":"<p>Upload a single object from Google Cloud Storage (GCS).</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>bucket_id</code> <code>str</code> <p>Bucket ID</p> required <code>local_file</code> <code>str</code> <p>Local file as source. Example: '/local-directory/my-filename.txt'</p> required <code>destination_blob</code> <code>str</code> <p>Destination blob in GCS bucket. Example: 'gcs-directory/my-filename.txt'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_storage.py</code> Python<pre><code>def upload_blob(self, project_id, bucket_id, local_file, destination_blob):\n    \"\"\"\n    Upload a single object from Google Cloud Storage (GCS).\n\n    Args:\n        project_id (str): Project ID\n        bucket_id (str): Bucket ID\n        local_file (str): Local file as source. Example: '/local-directory/my-filename.txt'\n        destination_blob (str): Destination blob in GCS bucket. Example: 'gcs-directory/my-filename.txt'\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    gcs_client = storage.Client(project=project_id)\n    bucket = gcs_client.bucket(bucket_id)\n    blob = bucket.blob(destination_blob)\n    blob.upload_from_filename(local_file)\n    results = 'OK'\n    return results          \n</code></pre>"},{"location":"gcp-storage/#honeydew.gcp_storage.GcpCloudStorage.upload_many_blobs","title":"<code>upload_many_blobs(project_id, bucket_id, local_dir, destination_dir)</code>","text":"<p>Upload multiple objects to Google Cloud Storage (GCS).</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>bucket_id</code> <code>str</code> <p>Bucket ID</p> required <code>local_dir</code> <code>str</code> <p>Local directory as source. Example: '/local-directory'</p> required <code>destination_dir</code> <code>str</code> <p>Destination directory in GCS bucket. Example: 'gcs-directory'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp_storage.py</code> Python<pre><code>def upload_many_blobs(self, project_id, bucket_id, local_dir, destination_dir):\n    \"\"\"\n    Upload multiple objects to Google Cloud Storage (GCS).\n\n    Args:\n        project_id (str): Project ID\n        bucket_id (str): Bucket ID\n        local_dir (str): Local directory as source. Example: '/local-directory'\n        destination_dir (str): Destination directory in GCS bucket. Example: 'gcs-directory'\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    gcs_client = storage.Client(project=project_id)\n    bucket = gcs_client.bucket(bucket_id)\n    for filename in os.listdir(local_dir):\n        blob = bucket.blob(f'{destination_dir}/{filename}')\n        blob.upload_from_filename(f'{local_dir}/{filename}')\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp-translate/","title":"GCP Translate Connector","text":""},{"location":"gcp-translate/#honeydew.gcp_translate.GcpTranslate","title":"<code>GcpTranslate</code>","text":"<p>Instantiate a GCP Translate object.</p> <p>Parameters:</p> Name Type Description Default <code>credential_file</code> <code>str</code> <p>Credential json file</p> required <code>proxy</code> <code>str</code> <p>Proxy address</p> <code>''</code> Source code in <code>honeydew/gcp_translate.py</code> Python<pre><code>class GcpTranslate:\n    \"\"\"\n    Instantiate a GCP Translate object.\n\n    Args:\n        credential_file (str): Credential json file\n        proxy (str): Proxy address\n    \"\"\"\n    def __init__(self, credential_file, proxy=''):\n        self.credential_file = credential_file\n        self.proxy = proxy\n        os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = credential_file\n        if proxy != '':\n            os.environ['HTTP_PROXY'] = proxy\n            os.environ['HTTPS_PROXY'] = proxy\n\n    # Translate text from one language to another language\n    def translate_text(self, text, target_language='en'):\n        \"\"\"\n        Translate text from one language to another language.\n\n        Args:\n            text (str): Text to be translated\n            target_language (str): Target language. Default: 'en'\n\n        Returns:\n            result (str): Translated text\n        \"\"\"\n        translate_client = translate.Client()\n        result = translate_client.translate(text, target_language=target_language)\n        return result['translatedText']\n</code></pre>"},{"location":"gcp-translate/#honeydew.gcp_translate.GcpTranslate.translate_text","title":"<code>translate_text(text, target_language='en')</code>","text":"<p>Translate text from one language to another language.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to be translated</p> required <code>target_language</code> <code>str</code> <p>Target language. Default: 'en'</p> <code>'en'</code> <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Translated text</p> Source code in <code>honeydew/gcp_translate.py</code> Python<pre><code>def translate_text(self, text, target_language='en'):\n    \"\"\"\n    Translate text from one language to another language.\n\n    Args:\n        text (str): Text to be translated\n        target_language (str): Target language. Default: 'en'\n\n    Returns:\n        result (str): Translated text\n    \"\"\"\n    translate_client = translate.Client()\n    result = translate_client.translate(text, target_language=target_language)\n    return result['translatedText']\n</code></pre>"},{"location":"gcp/","title":"GCP Connector","text":""},{"location":"gcp/#honeydew.gcp.GcpConnector","title":"<code>GcpConnector</code>","text":"<p>Instantiate a GCP connector.</p> <p>Parameters:</p> Name Type Description Default <code>credential_file</code> <code>str</code> <p>Credential json file</p> required <code>proxy</code> <code>str</code> <p>Proxy address</p> <code>''</code> Source code in <code>honeydew/gcp.py</code> Python<pre><code>class GcpConnector:\n    \"\"\"\n    Instantiate a GCP connector.\n\n    Args:\n        credential_file (str): Credential json file\n        proxy (str): Proxy address\n    \"\"\"\n    def __init__(self, credential_file, proxy=''):\n        self.credential_file = credential_file\n        self.proxy = proxy\n        os.environ[\"GOOGLE_APPLICATION_CREDENTIALS\"] = credential_file\n        if proxy != '':\n            os.environ['HTTP_PROXY'] = proxy\n            os.environ['HTTPS_PROXY'] = proxy\n\n    def bq_query_to_dataframe(self, project_id, query, timeout=3600, method=1):\n        \"\"\"\n        Submit query to BigQuery and store result into pandas dataframe.\n\n        Args:\n            project_id (str): Project ID\n            query (str): SQL query\n            timeout (int): Query timeout in seconds\n            method (int): API that will be used to query (1: google-cloud-bigquery, 2: pandas-gbq)\n\n        Returns:\n            result (dataframe)): Result in pandas dataframe\n        \"\"\"\n        df = pd.DataFrame()\n        bqclient = bigquery.Client(project=project_id)\n        query_job = bqclient.query(query)\n        if method == 2:\n            df = pd.read_gbq(query=query, project_id=project_id)\n        else:\n            rows = list(query_job.result(timeout=timeout))\n            df = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\n        return df\n\n    def bq_query_non_dql(self, project_id, query):\n        \"\"\"\n        Submit non Data Query Language (DQL) type of query to BigQuery. Example: CREATE, DROP, TRUNCATE, INSERT, UPDATE, DELETE.\n\n        Args:\n            project_id (str): Project ID\n            query (str): SQL query\n\n        Returns:\n            result (result): Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result\n        \"\"\"\n        bqclient = bigquery.Client(project=project_id)\n        query_job = bqclient.query(query)\n        results = query_job.result()\n        return results\n\n    def bq_export_table_to_gcs(self, project_id, dataset_id, table_id, gcs_uri, format='CSV', delimiter=',', enable_compression=True, compression='GZIP', overwrite=True, region='northamerica-northeast1'):\n        \"\"\"\n        Export BigQuery table into Google Cloud Storage (GCS).\n\n        Args:\n            project_id (str): Project ID\n            table_id (str): Table ID\n            dataset_id (str): Dataset ID\n            gcs_uri (str): GCS URI as destination. Example: 'gs://my-bucket/my-dir/tickets-20220101-*.csv.gz'\n            format (str): File format (CSV, JSON, Avro, Parquet). Default: 'CSV'\n            delimiter (str): CSV delimiter character. Default: ','\n            enable_compression (boolean): Files will be compressed if the value is True. Default: True\n            compression (str): Compression format. Default: GZIP. Reference: https://cloud.google.com/bigquery/docs/exporting-data#export_formats_and_compression_types\n            overwrite (boolean): GCS URI destination will be overwritten if the value is True. Default: True\n            region (str): Region to run the process. Default: 'northamerica-northeast1'\n\n        Returns:\n            result (result): Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result\n        \"\"\"\n        bqclient = bigquery.Client(project=project_id)\n        dataset_ref = bigquery.DatasetReference(project_id, dataset_id)\n        table_ref = dataset_ref.table(table_id)\n        job_config = bigquery.job.ExtractJobConfig()\n        if enable_compression == True:\n            if compression == 'DEFLATE':\n                job_config.compression = bigquery.Compression.DEFLATE\n            if compression == 'SNAPPY':\n                job_config.compression = bigquery.Compression.SNAPPY\n            else:\n                job_config.compression = bigquery.Compression.GZIP\n\n        extract_job = bqclient.extract_table(table_ref, gcs_uri, location=region, job_config=job_config)\n        results = extract_job.result()\n        return results\n\n    def gcs_download_single_file(self, project_id, bucket_id, source_blob_path, destination_path):\n        \"\"\"\n        Download a single object from Google Cloud Storage (GCS).\n\n        Args:\n            project_id (str): Project ID\n            bucket_id (str): Bucket ID\n            source_blob_path (str): The path of source object. Example: 'gcs-directory/my-filename.txt'\n            destination_path (str): Local destination path. Example: '/my-directory/my-filename.txt'\n\n        Returns:\n            result (result): Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result\n        \"\"\"\n        gcs_client = storage.Client(project=project_id)\n        bucket = gcs_client.bucket(bucket_id)\n        blob = bucket.blob(source_blob_path)\n        blob.download_to_filename(destination_path)\n        results = 'OK'\n        return results\n\n    def gcs_download_objects_with_pattern(self, project_id, bucket_id, blob_prefix, destination_dir_path, printout=True):\n        \"\"\"\n        Download multiple objects which have same prefix pattern from Google Cloud Storage (GCS).\n\n        Args:\n            project_id (str): Project ID\n            bucket_id (str): Bucket ID\n            blob_prefix (str): The blob prefix pattern that wil be downloaded. Example: 'gcs-directory/tickets-20220101-'\n            destination_dir_path (str): Local destination directory path. Example: '/my-directory'\n            printout (boolean): File name will be displayed if this value is true. Default: True\n        \"\"\"\n\n        delimiter='/'\n        storage_client = storage.Client(project_id)\n        bucket=storage_client.get_bucket(bucket_id)\n        # List blobs iterate in folder \n        blobs=bucket.list_blobs(prefix=blob_prefix, delimiter=delimiter) # Excluding folder inside bucket\n        for blob in blobs:\n            if printout == True:\n                print(blob.name)\n            filename_raw = blob.name.split('/')\n            filename = filename_raw[len(filename_raw)-1]\n            destination_uri = '{}{}'.format(destination_dir_path, filename) \n            blob.download_to_filename(destination_uri)\n        results = 'OK'   \n        return results\n\n    def gcs_upload_single_file(self, project_id, bucket_id, local_file, destination_blob):\n        \"\"\"\n        Upload a single object from Google Cloud Storage (GCS).\n\n        Args:\n            project_id (str): Project ID\n            bucket_id (str): Bucket ID\n            local_file (str): Local file as source. Example: '/local-directory/my-filename.txt'\n            destination_blob (str): Destination blob in GCS bucket. Example: 'gcs-directory/my-filename.txt'\n\n        Returns:\n            result (str): It returns 'OK' when successful\n        \"\"\"\n        gcs_client = storage.Client(project=project_id)\n        bucket = gcs_client.bucket(bucket_id)\n        blob = bucket.blob(destination_blob)\n        blob.upload_from_filename(local_file)\n        results = 'OK'\n        return results            \n</code></pre>"},{"location":"gcp/#honeydew.gcp.GcpConnector.bq_export_table_to_gcs","title":"<code>bq_export_table_to_gcs(project_id, dataset_id, table_id, gcs_uri, format='CSV', delimiter=',', enable_compression=True, compression='GZIP', overwrite=True, region='northamerica-northeast1')</code>","text":"<p>Export BigQuery table into Google Cloud Storage (GCS).</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>table_id</code> <code>str</code> <p>Table ID</p> required <code>dataset_id</code> <code>str</code> <p>Dataset ID</p> required <code>gcs_uri</code> <code>str</code> <p>GCS URI as destination. Example: 'gs://my-bucket/my-dir/tickets-20220101-*.csv.gz'</p> required <code>format</code> <code>str</code> <p>File format (CSV, JSON, Avro, Parquet). Default: 'CSV'</p> <code>'CSV'</code> <code>delimiter</code> <code>str</code> <p>CSV delimiter character. Default: ','</p> <code>','</code> <code>enable_compression</code> <code>boolean</code> <p>Files will be compressed if the value is True. Default: True</p> <code>True</code> <code>compression</code> <code>str</code> <p>Compression format. Default: GZIP. Reference: https://cloud.google.com/bigquery/docs/exporting-data#export_formats_and_compression_types</p> <code>'GZIP'</code> <code>overwrite</code> <code>boolean</code> <p>GCS URI destination will be overwritten if the value is True. Default: True</p> <code>True</code> <code>region</code> <code>str</code> <p>Region to run the process. Default: 'northamerica-northeast1'</p> <code>'northamerica-northeast1'</code> <p>Returns:</p> Name Type Description <code>result</code> <code>result</code> <p>Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result</p> Source code in <code>honeydew/gcp.py</code> Python<pre><code>def bq_export_table_to_gcs(self, project_id, dataset_id, table_id, gcs_uri, format='CSV', delimiter=',', enable_compression=True, compression='GZIP', overwrite=True, region='northamerica-northeast1'):\n    \"\"\"\n    Export BigQuery table into Google Cloud Storage (GCS).\n\n    Args:\n        project_id (str): Project ID\n        table_id (str): Table ID\n        dataset_id (str): Dataset ID\n        gcs_uri (str): GCS URI as destination. Example: 'gs://my-bucket/my-dir/tickets-20220101-*.csv.gz'\n        format (str): File format (CSV, JSON, Avro, Parquet). Default: 'CSV'\n        delimiter (str): CSV delimiter character. Default: ','\n        enable_compression (boolean): Files will be compressed if the value is True. Default: True\n        compression (str): Compression format. Default: GZIP. Reference: https://cloud.google.com/bigquery/docs/exporting-data#export_formats_and_compression_types\n        overwrite (boolean): GCS URI destination will be overwritten if the value is True. Default: True\n        region (str): Region to run the process. Default: 'northamerica-northeast1'\n\n    Returns:\n        result (result): Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result\n    \"\"\"\n    bqclient = bigquery.Client(project=project_id)\n    dataset_ref = bigquery.DatasetReference(project_id, dataset_id)\n    table_ref = dataset_ref.table(table_id)\n    job_config = bigquery.job.ExtractJobConfig()\n    if enable_compression == True:\n        if compression == 'DEFLATE':\n            job_config.compression = bigquery.Compression.DEFLATE\n        if compression == 'SNAPPY':\n            job_config.compression = bigquery.Compression.SNAPPY\n        else:\n            job_config.compression = bigquery.Compression.GZIP\n\n    extract_job = bqclient.extract_table(table_ref, gcs_uri, location=region, job_config=job_config)\n    results = extract_job.result()\n    return results\n</code></pre>"},{"location":"gcp/#honeydew.gcp.GcpConnector.bq_query_non_dql","title":"<code>bq_query_non_dql(project_id, query)</code>","text":"<p>Submit non Data Query Language (DQL) type of query to BigQuery. Example: CREATE, DROP, TRUNCATE, INSERT, UPDATE, DELETE.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>query</code> <code>str</code> <p>SQL query</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>result</code> <p>Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result</p> Source code in <code>honeydew/gcp.py</code> Python<pre><code>def bq_query_non_dql(self, project_id, query):\n    \"\"\"\n    Submit non Data Query Language (DQL) type of query to BigQuery. Example: CREATE, DROP, TRUNCATE, INSERT, UPDATE, DELETE.\n\n    Args:\n        project_id (str): Project ID\n        query (str): SQL query\n\n    Returns:\n        result (result): Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result\n    \"\"\"\n    bqclient = bigquery.Client(project=project_id)\n    query_job = bqclient.query(query)\n    results = query_job.result()\n    return results\n</code></pre>"},{"location":"gcp/#honeydew.gcp.GcpConnector.bq_query_to_dataframe","title":"<code>bq_query_to_dataframe(project_id, query, timeout=3600, method=1)</code>","text":"<p>Submit query to BigQuery and store result into pandas dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>query</code> <code>str</code> <p>SQL query</p> required <code>timeout</code> <code>int</code> <p>Query timeout in seconds</p> <code>3600</code> <code>method</code> <code>int</code> <p>API that will be used to query (1: google-cloud-bigquery, 2: pandas-gbq)</p> <code>1</code> <p>Returns:</p> Name Type Description <code>result</code> <code>dataframe)</code> <p>Result in pandas dataframe</p> Source code in <code>honeydew/gcp.py</code> Python<pre><code>def bq_query_to_dataframe(self, project_id, query, timeout=3600, method=1):\n    \"\"\"\n    Submit query to BigQuery and store result into pandas dataframe.\n\n    Args:\n        project_id (str): Project ID\n        query (str): SQL query\n        timeout (int): Query timeout in seconds\n        method (int): API that will be used to query (1: google-cloud-bigquery, 2: pandas-gbq)\n\n    Returns:\n        result (dataframe)): Result in pandas dataframe\n    \"\"\"\n    df = pd.DataFrame()\n    bqclient = bigquery.Client(project=project_id)\n    query_job = bqclient.query(query)\n    if method == 2:\n        df = pd.read_gbq(query=query, project_id=project_id)\n    else:\n        rows = list(query_job.result(timeout=timeout))\n        df = pd.DataFrame(data=[list(x.values()) for x in rows], columns=list(rows[0].keys()))\n    return df\n</code></pre>"},{"location":"gcp/#honeydew.gcp.GcpConnector.gcs_download_objects_with_pattern","title":"<code>gcs_download_objects_with_pattern(project_id, bucket_id, blob_prefix, destination_dir_path, printout=True)</code>","text":"<p>Download multiple objects which have same prefix pattern from Google Cloud Storage (GCS).</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>bucket_id</code> <code>str</code> <p>Bucket ID</p> required <code>blob_prefix</code> <code>str</code> <p>The blob prefix pattern that wil be downloaded. Example: 'gcs-directory/tickets-20220101-'</p> required <code>destination_dir_path</code> <code>str</code> <p>Local destination directory path. Example: '/my-directory'</p> required <code>printout</code> <code>boolean</code> <p>File name will be displayed if this value is true. Default: True</p> <code>True</code> Source code in <code>honeydew/gcp.py</code> Python<pre><code>def gcs_download_objects_with_pattern(self, project_id, bucket_id, blob_prefix, destination_dir_path, printout=True):\n    \"\"\"\n    Download multiple objects which have same prefix pattern from Google Cloud Storage (GCS).\n\n    Args:\n        project_id (str): Project ID\n        bucket_id (str): Bucket ID\n        blob_prefix (str): The blob prefix pattern that wil be downloaded. Example: 'gcs-directory/tickets-20220101-'\n        destination_dir_path (str): Local destination directory path. Example: '/my-directory'\n        printout (boolean): File name will be displayed if this value is true. Default: True\n    \"\"\"\n\n    delimiter='/'\n    storage_client = storage.Client(project_id)\n    bucket=storage_client.get_bucket(bucket_id)\n    # List blobs iterate in folder \n    blobs=bucket.list_blobs(prefix=blob_prefix, delimiter=delimiter) # Excluding folder inside bucket\n    for blob in blobs:\n        if printout == True:\n            print(blob.name)\n        filename_raw = blob.name.split('/')\n        filename = filename_raw[len(filename_raw)-1]\n        destination_uri = '{}{}'.format(destination_dir_path, filename) \n        blob.download_to_filename(destination_uri)\n    results = 'OK'   \n    return results\n</code></pre>"},{"location":"gcp/#honeydew.gcp.GcpConnector.gcs_download_single_file","title":"<code>gcs_download_single_file(project_id, bucket_id, source_blob_path, destination_path)</code>","text":"<p>Download a single object from Google Cloud Storage (GCS).</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>bucket_id</code> <code>str</code> <p>Bucket ID</p> required <code>source_blob_path</code> <code>str</code> <p>The path of source object. Example: 'gcs-directory/my-filename.txt'</p> required <code>destination_path</code> <code>str</code> <p>Local destination path. Example: '/my-directory/my-filename.txt'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>result</code> <p>Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result</p> Source code in <code>honeydew/gcp.py</code> Python<pre><code>def gcs_download_single_file(self, project_id, bucket_id, source_blob_path, destination_path):\n    \"\"\"\n    Download a single object from Google Cloud Storage (GCS).\n\n    Args:\n        project_id (str): Project ID\n        bucket_id (str): Bucket ID\n        source_blob_path (str): The path of source object. Example: 'gcs-directory/my-filename.txt'\n        destination_path (str): Local destination path. Example: '/my-directory/my-filename.txt'\n\n    Returns:\n        result (result): Iterator of row data. Reference: https://googleapis.dev/python/bigquery/latest/generated/google.cloud.bigquery.job.QueryJob.html?highlight=job%20result#google.cloud.bigquery.job.QueryJob.result\n    \"\"\"\n    gcs_client = storage.Client(project=project_id)\n    bucket = gcs_client.bucket(bucket_id)\n    blob = bucket.blob(source_blob_path)\n    blob.download_to_filename(destination_path)\n    results = 'OK'\n    return results\n</code></pre>"},{"location":"gcp/#honeydew.gcp.GcpConnector.gcs_upload_single_file","title":"<code>gcs_upload_single_file(project_id, bucket_id, local_file, destination_blob)</code>","text":"<p>Upload a single object from Google Cloud Storage (GCS).</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>Project ID</p> required <code>bucket_id</code> <code>str</code> <p>Bucket ID</p> required <code>local_file</code> <code>str</code> <p>Local file as source. Example: '/local-directory/my-filename.txt'</p> required <code>destination_blob</code> <code>str</code> <p>Destination blob in GCS bucket. Example: 'gcs-directory/my-filename.txt'</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>It returns 'OK' when successful</p> Source code in <code>honeydew/gcp.py</code> Python<pre><code>def gcs_upload_single_file(self, project_id, bucket_id, local_file, destination_blob):\n    \"\"\"\n    Upload a single object from Google Cloud Storage (GCS).\n\n    Args:\n        project_id (str): Project ID\n        bucket_id (str): Bucket ID\n        local_file (str): Local file as source. Example: '/local-directory/my-filename.txt'\n        destination_blob (str): Destination blob in GCS bucket. Example: 'gcs-directory/my-filename.txt'\n\n    Returns:\n        result (str): It returns 'OK' when successful\n    \"\"\"\n    gcs_client = storage.Client(project=project_id)\n    bucket = gcs_client.bucket(bucket_id)\n    blob = bucket.blob(destination_blob)\n    blob.upload_from_filename(local_file)\n    results = 'OK'\n    return results            \n</code></pre>"},{"location":"how-to-guides/","title":"MySQL","text":""},{"location":"how-to-guides/#importing-a-csv-file-into-mysql-by-replacing-a-table","title":"Importing a CSV file into MySQL by replacing a table","text":"load_csv_truncate.py<pre><code>from honeydew import MysqlConnector\n\n# Instantiate a mysql connector\nmysql_conn = MysqlConnector(host = 'mysql.mydomain.com', port = '3306', user = 'my_user', password = 'my_password', allow_local_infile=True)\n\n# Import a CSV file into a table by replacing the content\nresult = mysql_conn.load_csv_local(\n    db_name='db_name',\n    table_name='table_name',\n    file_name='test.csv',\n    write_disposition='WRITE_TRUNCATE'\n)\n</code></pre>"},{"location":"how-to-guides/#importing-a-csv-file-into-mysql-by-appending-a-table","title":"Importing a CSV file into MySQL by appending a table","text":"load_csv_append.py<pre><code>from honeydew import MysqlConnector\n\n# Instantiate a mysql connector\nmysql_conn = MysqlConnector(db_type = 'mysql', host = 'mysql.mydomain.com', port = '3306', user = 'my_user', password = 'my_password', allow_local_infile=True)\n\n# Import a CSV file into a table by replacing the content\nresult = mysql_conn.load_csv_local(\n    db_name='db_name',\n    table_name='table_name',\n    file_name='test.csv',\n    write_disposition='WRITE_APPEND'\n)\n</code></pre>"},{"location":"how-to-guides/#gcp","title":"GCP","text":""},{"location":"how-to-guides/#instantiating-a-gcp-connector-with-or-without-proxy","title":"Instantiating a GCP connector with or without proxy","text":"init_gcp.py<pre><code>from honeydew import GcpConnector\n\n# Instantiate a GCP connector with internet connection behind proxy\ng_client = GcpConnector(credential_file='my-secret-credential.json', proxy='http://proxy.mydomain.com:8080')\n\n# Instantiate a GCP connector with direct internet connection\ng_client = GcpConnector(credential_file='my-secret-credential.json')\n</code></pre>"},{"location":"how-to-guides/#querying-bigquery-table-and-store-the-result-into-a-dataframe","title":"Querying BigQuery table and store the result into a DataFrame","text":"query_to_df.py<pre><code>from honeydew import GcpConnector\n\n# Instantiate a GCP connector with internet connection behind proxy\ng_client = GcpConnector(credential_file='my-secret-credential.json', proxy='http://proxy.mydomain.com:8080')\nproject_id = 'sweet-honeydew-125283'\n\n# Submit a query and store the result into a DataFrame\nquery = 'SELECT * FROM `sweet-honeydew-125283.universe.galaxies` LIMIT 5'\ndf = g_client.bq_query_to_dataframe(project_id, query)\nprint(df.head())\n</code></pre>"},{"location":"mysql/","title":"MySQL Connector","text":""},{"location":"mysql/#honeydew.mysql.MysqlConnector","title":"<code>MysqlConnector</code>","text":"<p>Instantiate a DB connector.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Database host </p> required <code>port</code> <code>str</code> <p>Database port</p> required <code>user</code> <code>str</code> <p>Username</p> required <code>password</code> <code>str</code> <p>Password</p> required <code>allow_local_infile</code> <code>boolean</code> <p>Local infile is allowed when the value is True</p> <code>False</code> <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Value is 'OK' when successful</p> Source code in <code>honeydew/mysql.py</code> Python<pre><code>class MysqlConnector:\n    \"\"\"Instantiate a DB connector.\n\n    Args:\n        host (str): Database host \n        port (str): Database port\n        user (str): Username\n        password (str): Password\n        allow_local_infile (boolean): Local infile is allowed when the value is True\n\n    Returns:\n        result (str): Value is 'OK' when successful\n    \"\"\"   \n\n    def __init__(self, host, port, user, password, allow_local_infile=False):\n        self.host = host\n        self.port = port\n        self.user = user\n        self.password = password\n        self.allow_local_infile = allow_local_infile\n\n        self.db_connection = sql.connect(\n            host=self.host,\n            port=self.port,\n            user=self.user,\n            password=self.password,\n            ssl_disabled=True,\n            autocommit=True,\n            allow_local_infile=True\n        )    \n        self.db_cursor = self.db_connection.cursor()\n        if allow_local_infile:\n            query_str = \"\"\"SET GLOBAL local_infile=1\"\"\"\n            self.db_cursor.execute(query_str)\n\n    def query_without_fetch(self, query_str):\n        \"\"\"\n        Send non DQL query.\n\n        Args:\n            query_str (str): sql query\n\n        Returns:\n            result (str): Value is 'OK' when successful\n        \"\"\"\n        self.db_cursor.execute(query_str)\n        return 'OK'\n\n    def query_to_dataframe(self, query_str):\n        \"\"\"\n        Query and store the result in a dataframe.\n\n        Args:\n            query_str (str): sql query\n\n        Returns:\n            result (dataframe): Result in a dataframe\n        \"\"\"\n        self.db_cursor.execute(query_str)\n        table_rows = self.db_cursor.fetchall()\n        df = pd.DataFrame(table_rows, columns=self.db_cursor.column_names)\n        return df\n\n    def load_csv(\n        self,\n        db_name, \n        table_name, \n        file_name,\n        write_disposition,\n        delimiter=',', \n        ignore_rows=1,\n        is_local_csv=True\n    ):\n        \"\"\"\n        Load a local CSV file into a table.\n\n        Args:\n            db_name (str): Database name where the CSV will be loaded\n            table_name (str): Table name where the CSV will be loaded\n            file_name (str): CSV file name\n            delimiter (str): CSV delimiter character\n            ignore_rows (str): Number of rows that will be ignored from the top\n            write_disposition (str): Write method to add data into table (WRITE_TRUNCATE, WRITE_APPEND)\n            is_local_csv (boolean): If the value is True, then CSV file is in local machine. If the value is False, then CSV file is in remote machine.\n\n        Returns:\n            result (str): The result of function\n        \"\"\"\n        result = ''\n\n        if write_disposition == 'WRITE_TRUNCATE':\n            query = 'TRUNCATE TABLE {db_name}.{table_name}'.format(db_name=db_name, table_name=table_name)\n            self.db_cursor.execute(query)\n            self.db_connection.commit()\n\n        # load table\n        if is_local_csv:\n            sql_import_table = (\"\"\" LOAD DATA LOCAL INFILE '{file_name}' \n                                    INTO TABLE {db_name}.{table_name}\n                                    FIELDS TERMINATED BY '{delimiter}' \n                                    LINES TERMINATED BY '\\\\n'\n                                    IGNORE {ignore_rows} ROWS;\n            \"\"\").format(file_name=file_name, db_name=db_name, table_name=table_name, delimiter=delimiter, ignore_rows=ignore_rows)\n        else:\n            sql_import_table = (\"\"\" LOAD DATA INFILE '{file_name}' \n                                    INTO TABLE {db_name}.{table_name}\n                                    FIELDS TERMINATED BY '{delimiter}' \n                                    LINES TERMINATED BY '\\\\n'\n                                    IGNORE {ignore_rows} ROWS;\n            \"\"\").format(file_name=file_name, db_name=db_name, table_name=table_name, delimiter=delimiter, ignore_rows=ignore_rows)\n\n        self.db_cursor.execute(sql_import_table)\n        self.db_connection.commit()\n        result = 'OK'\n        return result\n</code></pre>"},{"location":"mysql/#honeydew.mysql.MysqlConnector.load_csv","title":"<code>load_csv(db_name, table_name, file_name, write_disposition, delimiter=',', ignore_rows=1, is_local_csv=True)</code>","text":"<p>Load a local CSV file into a table.</p> <p>Parameters:</p> Name Type Description Default <code>db_name</code> <code>str</code> <p>Database name where the CSV will be loaded</p> required <code>table_name</code> <code>str</code> <p>Table name where the CSV will be loaded</p> required <code>file_name</code> <code>str</code> <p>CSV file name</p> required <code>delimiter</code> <code>str</code> <p>CSV delimiter character</p> <code>','</code> <code>ignore_rows</code> <code>str</code> <p>Number of rows that will be ignored from the top</p> <code>1</code> <code>write_disposition</code> <code>str</code> <p>Write method to add data into table (WRITE_TRUNCATE, WRITE_APPEND)</p> required <code>is_local_csv</code> <code>boolean</code> <p>If the value is True, then CSV file is in local machine. If the value is False, then CSV file is in remote machine.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>The result of function</p> Source code in <code>honeydew/mysql.py</code> Python<pre><code>def load_csv(\n    self,\n    db_name, \n    table_name, \n    file_name,\n    write_disposition,\n    delimiter=',', \n    ignore_rows=1,\n    is_local_csv=True\n):\n    \"\"\"\n    Load a local CSV file into a table.\n\n    Args:\n        db_name (str): Database name where the CSV will be loaded\n        table_name (str): Table name where the CSV will be loaded\n        file_name (str): CSV file name\n        delimiter (str): CSV delimiter character\n        ignore_rows (str): Number of rows that will be ignored from the top\n        write_disposition (str): Write method to add data into table (WRITE_TRUNCATE, WRITE_APPEND)\n        is_local_csv (boolean): If the value is True, then CSV file is in local machine. If the value is False, then CSV file is in remote machine.\n\n    Returns:\n        result (str): The result of function\n    \"\"\"\n    result = ''\n\n    if write_disposition == 'WRITE_TRUNCATE':\n        query = 'TRUNCATE TABLE {db_name}.{table_name}'.format(db_name=db_name, table_name=table_name)\n        self.db_cursor.execute(query)\n        self.db_connection.commit()\n\n    # load table\n    if is_local_csv:\n        sql_import_table = (\"\"\" LOAD DATA LOCAL INFILE '{file_name}' \n                                INTO TABLE {db_name}.{table_name}\n                                FIELDS TERMINATED BY '{delimiter}' \n                                LINES TERMINATED BY '\\\\n'\n                                IGNORE {ignore_rows} ROWS;\n        \"\"\").format(file_name=file_name, db_name=db_name, table_name=table_name, delimiter=delimiter, ignore_rows=ignore_rows)\n    else:\n        sql_import_table = (\"\"\" LOAD DATA INFILE '{file_name}' \n                                INTO TABLE {db_name}.{table_name}\n                                FIELDS TERMINATED BY '{delimiter}' \n                                LINES TERMINATED BY '\\\\n'\n                                IGNORE {ignore_rows} ROWS;\n        \"\"\").format(file_name=file_name, db_name=db_name, table_name=table_name, delimiter=delimiter, ignore_rows=ignore_rows)\n\n    self.db_cursor.execute(sql_import_table)\n    self.db_connection.commit()\n    result = 'OK'\n    return result\n</code></pre>"},{"location":"mysql/#honeydew.mysql.MysqlConnector.query_to_dataframe","title":"<code>query_to_dataframe(query_str)</code>","text":"<p>Query and store the result in a dataframe.</p> <p>Parameters:</p> Name Type Description Default <code>query_str</code> <code>str</code> <p>sql query</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>dataframe</code> <p>Result in a dataframe</p> Source code in <code>honeydew/mysql.py</code> Python<pre><code>def query_to_dataframe(self, query_str):\n    \"\"\"\n    Query and store the result in a dataframe.\n\n    Args:\n        query_str (str): sql query\n\n    Returns:\n        result (dataframe): Result in a dataframe\n    \"\"\"\n    self.db_cursor.execute(query_str)\n    table_rows = self.db_cursor.fetchall()\n    df = pd.DataFrame(table_rows, columns=self.db_cursor.column_names)\n    return df\n</code></pre>"},{"location":"mysql/#honeydew.mysql.MysqlConnector.query_without_fetch","title":"<code>query_without_fetch(query_str)</code>","text":"<p>Send non DQL query.</p> <p>Parameters:</p> Name Type Description Default <code>query_str</code> <code>str</code> <p>sql query</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Value is 'OK' when successful</p> Source code in <code>honeydew/mysql.py</code> Python<pre><code>def query_without_fetch(self, query_str):\n    \"\"\"\n    Send non DQL query.\n\n    Args:\n        query_str (str): sql query\n\n    Returns:\n        result (str): Value is 'OK' when successful\n    \"\"\"\n    self.db_cursor.execute(query_str)\n    return 'OK'\n</code></pre>"},{"location":"notification/","title":"Notification Connector","text":""},{"location":"notification/#honeydew.notification.Notification","title":"<code>Notification</code>","text":"<p>Instantiate a Notification object.</p> <p>Parameters:</p> Name Type Description Default <code>proxy</code> <code>str</code> <p>Proxy address</p> <code>''</code> Source code in <code>honeydew/notification.py</code> Python<pre><code>class Notification:\n    \"\"\"\n    Instantiate a Notification object.\n\n    Args:\n        proxy (str): Proxy address\n    \"\"\"    \n    def __init__(self, proxy=''):\n        self.proxies = {}\n        if proxy != '':\n            proxies = {\n                'http': proxy,\n                'https': proxy,\n            }\n\n\n    # Sending message through webhook (Google Chat, Slack, etc)\n    def send_google_chat_message(self, webhook_url, message):\n        \"\"\"\n        Send message through webhook (Google Chat, Slack, etc).\n\n        Args:\n            webhook_url (str): Webhook URL\n            message (str): Message to be sent\n\n        Returns:\n            result (str): Value is 'OK' when successful\n        \"\"\"\n        headers = {'Content-type': 'application/json'}\n        data = {'text': message}\n        response = requests.post(webhook_url, headers=headers, data=json.dumps(data), proxies=self.proxies)\n        return 'OK'\n\n\n    # Creating Google Chat card as described in https://developers.google.com/chat/how-tos/cards-onclick\n    def create_google_chat_card(self, title, subtitle, image_url, image_alt_text, text, button_text, button_url):\n        \"\"\"\n        Create Google Chat card.\n\n        Args:\n            title (str): Card title\n            subtitle (str): Card subtitle\n            image_url (str): Image URL\n            image_alt_text (str): Image alt text\n            text (str): Card text\n            button_text (str): Button text\n            button_url (str): Button URL\n\n        Returns:\n            card (dict): Card to be sent\n        \"\"\"\n        card = {\n            \"cards\": [\n                {\n                    \"header\": {\n                        \"title\": title,\n                        \"subtitle\": subtitle,\n                        \"imageUrl\": image_url,\n                        \"imageStyle\": \"IMAGE\"\n                    },\n                    \"sections\": [\n                        {\n                            \"widgets\": [\n                                {\n                                    \"textParagraph\": {\n                                        \"text\": text\n                                    }\n                                },\n                                {\n                                    \"buttons\": [\n                                        {\n                                            \"textButton\": {\n                                                \"text\": button_text,\n                                                \"onClick\": {\n                                                    \"openLink\": {\n                                                        \"url\": button_url\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                }\n            ]\n        }\n        return card\n\n    # Sending card to Google Chat \n    def send_google_chat_card(self, webhook_url, card):\n        \"\"\"\n        Send card to Google Chat.\n\n        Args:\n            webhook_url (str): Webhook URL\n            card (dict): Card to be sent\n\n        Returns:\n            result (str): Value is 'OK' when successful\n        \"\"\"\n        headers = {'Content-type': 'application/json'}\n        data = card\n        response = requests.post(webhook_url, headers=headers, data=json.dumps(data), proxies=self.proxies)\n        return 'OK'\n\n    # Sending email through SMTP\n    def send_smtp_email(self, smtp_server, smtp_port, smtp_username, smtp_password, sender, recipient, subject, message):\n        \"\"\"\n        Send email through SMTP.\n\n        Args:\n            smtp_server (str): SMTP server address\n            smtp_port (str): SMTP port\n            smtp_username (str): SMTP username\n            smtp_password (str): SMTP password\n            sender (str): Sender email address\n            recipient (str): Recipient email address\n            subject (str): Email subject\n            message (str): Email message\n\n        Returns:\n            result (str): Value is 'OK' when successful\n        \"\"\"\n        import smtplib\n        from email.mime.multipart import MIMEMultipart\n        from email.mime.text import MIMEText\n        from email.mime.base import MIMEBase\n        from email import encoders\n\n        msg = MIMEMultipart()\n        msg['From'] = sender\n        msg['To'] = recipient\n        msg['Subject'] = subject\n        msg.attach(MIMEText(message, 'plain'))\n        text = msg.as_string()\n        server = smtplib.SMTP(smtp_server, smtp_port)\n        server.starttls()\n        server.login(smtp_username, smtp_password)\n        server.sendmail(sender, recipient, text)\n        server.quit()\n        return 'OK'\n\n    # Sending email through SMTP with attachment\n    def send_smtp_email_with_attachment(self, smtp_server, smtp_port, smtp_username, smtp_password, sender, recipient, subject, message, attachment_path):\n        \"\"\"\n        Send email through SMTP with attachment.\n\n        Args:\n            smtp_server (str): SMTP server address\n            smtp_port (str): SMTP port\n            smtp_username (str): SMTP username\n            smtp_password (str): SMTP password\n            sender (str): Sender email address\n            recipient (str): Recipient email address\n            subject (str): Email subject\n            message (str): Email message\n            attachment_path (str): Attachment file path\n\n        Returns:\n            result (str): Value is 'OK' when successful\n        \"\"\"\n        import smtplib\n        from email.mime.multipart import MIMEMultipart\n        from email.mime.text import MIMEText\n        from email.mime.base import MIMEBase\n        from email import encoders\n\n        msg = MIMEMultipart()\n        msg['From'] = sender\n        msg['To'] = recipient\n        msg['Subject'] = subject\n        msg.attach(MIMEText(message, 'plain'))\n        filename = os.path.basename(attachment_path)\n        attachment = open(attachment_path, \"rb\")\n        part = MIMEBase('application', 'octet-stream')\n        part.set_payload(attachment.read())\n        encoders.encode_base64(part)\n        part.add_header('Content-Disposition', f\"attachment; filename= {filename}\")\n        msg.attach(part)\n        text = msg.as_string()\n        server = smtplib.SMTP(smtp_server, smtp_port)\n        server.starttls()\n        server.login(smtp_username, smtp_password)\n        server.sendmail(sender, recipient, text)\n        server.quit()\n        return 'OK'\n\n    # Sending email through SMTP in HTML format\n    def send_smtp_email_html(self, smtp_server, smtp_port, smtp_username, smtp_password, sender, recipient, subject, message):\n        \"\"\"\n        Send email through SMTP in HTML format.\n\n        Args:\n            smtp_server (str): SMTP server address\n            smtp_port (str): SMTP port\n            smtp_username (str): SMTP username\n            smtp_password (str): SMTP password\n            sender (str): Sender email address\n            recipient (str): Recipient email address\n            subject (str): Email subject\n            message (str): Email message\n\n        Returns:\n            result (str): Value is 'OK' when successful\n        \"\"\"\n        import smtplib\n        from email.mime.multipart import MIMEMultipart\n        from email.mime.text import MIMEText\n        from email.mime.base import MIMEBase\n        from email import encoders\n\n        msg = MIMEMultipart()\n        msg['From'] = sender\n        msg['To'] = recipient\n        msg['Subject'] = subject\n        msg.attach(MIMEText(message, 'html'))\n        text = msg.as_string()\n        server = smtplib.SMTP(smtp_server, smtp_port)\n        server.starttls()\n        server.login(smtp_username, smtp_password)\n        server.sendmail(sender, recipient, text)\n        server.quit()\n        return 'OK'\n\n    # Sending email through SMTP in HTML format with attachment\n    def send_smtp_email_html_with_attachment(self, smtp_server, smtp_port, smtp_username, smtp_password, sender, recipient, subject, message, attachment_path):\n        \"\"\"\n        Send email through SMTP in HTML format with attachment.\n\n        Args:\n            smtp_server (str): SMTP server address\n            smtp_port (str): SMTP port\n            smtp_username (str): SMTP username\n            smtp_password (str): SMTP password\n            sender (str): Sender email address\n            recipient (str): Recipient email address\n            subject (str): Email subject\n            message (str): Email message\n            attachment_path (str): Attachment file path\n\n        Returns:\n            result (str): Value is 'OK' when successful\n        \"\"\"\n        import smtplib\n        from email.mime.multipart import MIMEMultipart\n        from email.mime.text import MIMEText\n        from email.mime.base import MIMEBase\n        from email import encoders\n\n        msg = MIMEMultipart()\n        msg['From'] = sender\n        msg['To'] = recipient\n        msg['Subject'] = subject\n        msg.attach(MIMEText(message, 'html'))\n        filename = os.path.basename(attachment_path)\n        attachment = open(attachment_path, \"rb\")\n        part = MIMEBase('application', 'octet-stream')\n        part.set_payload(attachment.read())\n        encoders.encode_base64(part)\n        part.add_header('Content-Disposition', f\"attachment; filename= {filename}\")\n        msg.attach(part)\n        text = msg.as_string()\n        server = smtplib.SMTP(smtp_server, smtp_port)\n        server.starttls()\n        server.login(smtp_username, smtp_password)\n        server.sendmail(sender, recipient, text)\n        server.quit()\n        return 'OK'\n</code></pre>"},{"location":"notification/#honeydew.notification.Notification.create_google_chat_card","title":"<code>create_google_chat_card(title, subtitle, image_url, image_alt_text, text, button_text, button_url)</code>","text":"<p>Create Google Chat card.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>Card title</p> required <code>subtitle</code> <code>str</code> <p>Card subtitle</p> required <code>image_url</code> <code>str</code> <p>Image URL</p> required <code>image_alt_text</code> <code>str</code> <p>Image alt text</p> required <code>text</code> <code>str</code> <p>Card text</p> required <code>button_text</code> <code>str</code> <p>Button text</p> required <code>button_url</code> <code>str</code> <p>Button URL</p> required <p>Returns:</p> Name Type Description <code>card</code> <code>dict</code> <p>Card to be sent</p> Source code in <code>honeydew/notification.py</code> Python<pre><code>def create_google_chat_card(self, title, subtitle, image_url, image_alt_text, text, button_text, button_url):\n    \"\"\"\n    Create Google Chat card.\n\n    Args:\n        title (str): Card title\n        subtitle (str): Card subtitle\n        image_url (str): Image URL\n        image_alt_text (str): Image alt text\n        text (str): Card text\n        button_text (str): Button text\n        button_url (str): Button URL\n\n    Returns:\n        card (dict): Card to be sent\n    \"\"\"\n    card = {\n        \"cards\": [\n            {\n                \"header\": {\n                    \"title\": title,\n                    \"subtitle\": subtitle,\n                    \"imageUrl\": image_url,\n                    \"imageStyle\": \"IMAGE\"\n                },\n                \"sections\": [\n                    {\n                        \"widgets\": [\n                            {\n                                \"textParagraph\": {\n                                    \"text\": text\n                                }\n                            },\n                            {\n                                \"buttons\": [\n                                    {\n                                        \"textButton\": {\n                                            \"text\": button_text,\n                                            \"onClick\": {\n                                                \"openLink\": {\n                                                    \"url\": button_url\n                                                }\n                                            }\n                                        }\n                                    }\n                                ]\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n    return card\n</code></pre>"},{"location":"notification/#honeydew.notification.Notification.send_google_chat_card","title":"<code>send_google_chat_card(webhook_url, card)</code>","text":"<p>Send card to Google Chat.</p> <p>Parameters:</p> Name Type Description Default <code>webhook_url</code> <code>str</code> <p>Webhook URL</p> required <code>card</code> <code>dict</code> <p>Card to be sent</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Value is 'OK' when successful</p> Source code in <code>honeydew/notification.py</code> Python<pre><code>def send_google_chat_card(self, webhook_url, card):\n    \"\"\"\n    Send card to Google Chat.\n\n    Args:\n        webhook_url (str): Webhook URL\n        card (dict): Card to be sent\n\n    Returns:\n        result (str): Value is 'OK' when successful\n    \"\"\"\n    headers = {'Content-type': 'application/json'}\n    data = card\n    response = requests.post(webhook_url, headers=headers, data=json.dumps(data), proxies=self.proxies)\n    return 'OK'\n</code></pre>"},{"location":"notification/#honeydew.notification.Notification.send_google_chat_message","title":"<code>send_google_chat_message(webhook_url, message)</code>","text":"<p>Send message through webhook (Google Chat, Slack, etc).</p> <p>Parameters:</p> Name Type Description Default <code>webhook_url</code> <code>str</code> <p>Webhook URL</p> required <code>message</code> <code>str</code> <p>Message to be sent</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Value is 'OK' when successful</p> Source code in <code>honeydew/notification.py</code> Python<pre><code>def send_google_chat_message(self, webhook_url, message):\n    \"\"\"\n    Send message through webhook (Google Chat, Slack, etc).\n\n    Args:\n        webhook_url (str): Webhook URL\n        message (str): Message to be sent\n\n    Returns:\n        result (str): Value is 'OK' when successful\n    \"\"\"\n    headers = {'Content-type': 'application/json'}\n    data = {'text': message}\n    response = requests.post(webhook_url, headers=headers, data=json.dumps(data), proxies=self.proxies)\n    return 'OK'\n</code></pre>"},{"location":"notification/#honeydew.notification.Notification.send_smtp_email","title":"<code>send_smtp_email(smtp_server, smtp_port, smtp_username, smtp_password, sender, recipient, subject, message)</code>","text":"<p>Send email through SMTP.</p> <p>Parameters:</p> Name Type Description Default <code>smtp_server</code> <code>str</code> <p>SMTP server address</p> required <code>smtp_port</code> <code>str</code> <p>SMTP port</p> required <code>smtp_username</code> <code>str</code> <p>SMTP username</p> required <code>smtp_password</code> <code>str</code> <p>SMTP password</p> required <code>sender</code> <code>str</code> <p>Sender email address</p> required <code>recipient</code> <code>str</code> <p>Recipient email address</p> required <code>subject</code> <code>str</code> <p>Email subject</p> required <code>message</code> <code>str</code> <p>Email message</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Value is 'OK' when successful</p> Source code in <code>honeydew/notification.py</code> Python<pre><code>def send_smtp_email(self, smtp_server, smtp_port, smtp_username, smtp_password, sender, recipient, subject, message):\n    \"\"\"\n    Send email through SMTP.\n\n    Args:\n        smtp_server (str): SMTP server address\n        smtp_port (str): SMTP port\n        smtp_username (str): SMTP username\n        smtp_password (str): SMTP password\n        sender (str): Sender email address\n        recipient (str): Recipient email address\n        subject (str): Email subject\n        message (str): Email message\n\n    Returns:\n        result (str): Value is 'OK' when successful\n    \"\"\"\n    import smtplib\n    from email.mime.multipart import MIMEMultipart\n    from email.mime.text import MIMEText\n    from email.mime.base import MIMEBase\n    from email import encoders\n\n    msg = MIMEMultipart()\n    msg['From'] = sender\n    msg['To'] = recipient\n    msg['Subject'] = subject\n    msg.attach(MIMEText(message, 'plain'))\n    text = msg.as_string()\n    server = smtplib.SMTP(smtp_server, smtp_port)\n    server.starttls()\n    server.login(smtp_username, smtp_password)\n    server.sendmail(sender, recipient, text)\n    server.quit()\n    return 'OK'\n</code></pre>"},{"location":"notification/#honeydew.notification.Notification.send_smtp_email_html","title":"<code>send_smtp_email_html(smtp_server, smtp_port, smtp_username, smtp_password, sender, recipient, subject, message)</code>","text":"<p>Send email through SMTP in HTML format.</p> <p>Parameters:</p> Name Type Description Default <code>smtp_server</code> <code>str</code> <p>SMTP server address</p> required <code>smtp_port</code> <code>str</code> <p>SMTP port</p> required <code>smtp_username</code> <code>str</code> <p>SMTP username</p> required <code>smtp_password</code> <code>str</code> <p>SMTP password</p> required <code>sender</code> <code>str</code> <p>Sender email address</p> required <code>recipient</code> <code>str</code> <p>Recipient email address</p> required <code>subject</code> <code>str</code> <p>Email subject</p> required <code>message</code> <code>str</code> <p>Email message</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Value is 'OK' when successful</p> Source code in <code>honeydew/notification.py</code> Python<pre><code>def send_smtp_email_html(self, smtp_server, smtp_port, smtp_username, smtp_password, sender, recipient, subject, message):\n    \"\"\"\n    Send email through SMTP in HTML format.\n\n    Args:\n        smtp_server (str): SMTP server address\n        smtp_port (str): SMTP port\n        smtp_username (str): SMTP username\n        smtp_password (str): SMTP password\n        sender (str): Sender email address\n        recipient (str): Recipient email address\n        subject (str): Email subject\n        message (str): Email message\n\n    Returns:\n        result (str): Value is 'OK' when successful\n    \"\"\"\n    import smtplib\n    from email.mime.multipart import MIMEMultipart\n    from email.mime.text import MIMEText\n    from email.mime.base import MIMEBase\n    from email import encoders\n\n    msg = MIMEMultipart()\n    msg['From'] = sender\n    msg['To'] = recipient\n    msg['Subject'] = subject\n    msg.attach(MIMEText(message, 'html'))\n    text = msg.as_string()\n    server = smtplib.SMTP(smtp_server, smtp_port)\n    server.starttls()\n    server.login(smtp_username, smtp_password)\n    server.sendmail(sender, recipient, text)\n    server.quit()\n    return 'OK'\n</code></pre>"},{"location":"notification/#honeydew.notification.Notification.send_smtp_email_html_with_attachment","title":"<code>send_smtp_email_html_with_attachment(smtp_server, smtp_port, smtp_username, smtp_password, sender, recipient, subject, message, attachment_path)</code>","text":"<p>Send email through SMTP in HTML format with attachment.</p> <p>Parameters:</p> Name Type Description Default <code>smtp_server</code> <code>str</code> <p>SMTP server address</p> required <code>smtp_port</code> <code>str</code> <p>SMTP port</p> required <code>smtp_username</code> <code>str</code> <p>SMTP username</p> required <code>smtp_password</code> <code>str</code> <p>SMTP password</p> required <code>sender</code> <code>str</code> <p>Sender email address</p> required <code>recipient</code> <code>str</code> <p>Recipient email address</p> required <code>subject</code> <code>str</code> <p>Email subject</p> required <code>message</code> <code>str</code> <p>Email message</p> required <code>attachment_path</code> <code>str</code> <p>Attachment file path</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Value is 'OK' when successful</p> Source code in <code>honeydew/notification.py</code> Python<pre><code>def send_smtp_email_html_with_attachment(self, smtp_server, smtp_port, smtp_username, smtp_password, sender, recipient, subject, message, attachment_path):\n    \"\"\"\n    Send email through SMTP in HTML format with attachment.\n\n    Args:\n        smtp_server (str): SMTP server address\n        smtp_port (str): SMTP port\n        smtp_username (str): SMTP username\n        smtp_password (str): SMTP password\n        sender (str): Sender email address\n        recipient (str): Recipient email address\n        subject (str): Email subject\n        message (str): Email message\n        attachment_path (str): Attachment file path\n\n    Returns:\n        result (str): Value is 'OK' when successful\n    \"\"\"\n    import smtplib\n    from email.mime.multipart import MIMEMultipart\n    from email.mime.text import MIMEText\n    from email.mime.base import MIMEBase\n    from email import encoders\n\n    msg = MIMEMultipart()\n    msg['From'] = sender\n    msg['To'] = recipient\n    msg['Subject'] = subject\n    msg.attach(MIMEText(message, 'html'))\n    filename = os.path.basename(attachment_path)\n    attachment = open(attachment_path, \"rb\")\n    part = MIMEBase('application', 'octet-stream')\n    part.set_payload(attachment.read())\n    encoders.encode_base64(part)\n    part.add_header('Content-Disposition', f\"attachment; filename= {filename}\")\n    msg.attach(part)\n    text = msg.as_string()\n    server = smtplib.SMTP(smtp_server, smtp_port)\n    server.starttls()\n    server.login(smtp_username, smtp_password)\n    server.sendmail(sender, recipient, text)\n    server.quit()\n    return 'OK'\n</code></pre>"},{"location":"notification/#honeydew.notification.Notification.send_smtp_email_with_attachment","title":"<code>send_smtp_email_with_attachment(smtp_server, smtp_port, smtp_username, smtp_password, sender, recipient, subject, message, attachment_path)</code>","text":"<p>Send email through SMTP with attachment.</p> <p>Parameters:</p> Name Type Description Default <code>smtp_server</code> <code>str</code> <p>SMTP server address</p> required <code>smtp_port</code> <code>str</code> <p>SMTP port</p> required <code>smtp_username</code> <code>str</code> <p>SMTP username</p> required <code>smtp_password</code> <code>str</code> <p>SMTP password</p> required <code>sender</code> <code>str</code> <p>Sender email address</p> required <code>recipient</code> <code>str</code> <p>Recipient email address</p> required <code>subject</code> <code>str</code> <p>Email subject</p> required <code>message</code> <code>str</code> <p>Email message</p> required <code>attachment_path</code> <code>str</code> <p>Attachment file path</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>str</code> <p>Value is 'OK' when successful</p> Source code in <code>honeydew/notification.py</code> Python<pre><code>def send_smtp_email_with_attachment(self, smtp_server, smtp_port, smtp_username, smtp_password, sender, recipient, subject, message, attachment_path):\n    \"\"\"\n    Send email through SMTP with attachment.\n\n    Args:\n        smtp_server (str): SMTP server address\n        smtp_port (str): SMTP port\n        smtp_username (str): SMTP username\n        smtp_password (str): SMTP password\n        sender (str): Sender email address\n        recipient (str): Recipient email address\n        subject (str): Email subject\n        message (str): Email message\n        attachment_path (str): Attachment file path\n\n    Returns:\n        result (str): Value is 'OK' when successful\n    \"\"\"\n    import smtplib\n    from email.mime.multipart import MIMEMultipart\n    from email.mime.text import MIMEText\n    from email.mime.base import MIMEBase\n    from email import encoders\n\n    msg = MIMEMultipart()\n    msg['From'] = sender\n    msg['To'] = recipient\n    msg['Subject'] = subject\n    msg.attach(MIMEText(message, 'plain'))\n    filename = os.path.basename(attachment_path)\n    attachment = open(attachment_path, \"rb\")\n    part = MIMEBase('application', 'octet-stream')\n    part.set_payload(attachment.read())\n    encoders.encode_base64(part)\n    part.add_header('Content-Disposition', f\"attachment; filename= {filename}\")\n    msg.attach(part)\n    text = msg.as_string()\n    server = smtplib.SMTP(smtp_server, smtp_port)\n    server.starttls()\n    server.login(smtp_username, smtp_password)\n    server.sendmail(sender, recipient, text)\n    server.quit()\n    return 'OK'\n</code></pre>"},{"location":"ssh/","title":"SSH Connector","text":""},{"location":"ssh/#honeydew.ssh.SshConnector","title":"<code>SshConnector</code>","text":"<p>Instantiate an SSH connector. Args:     host (str): SSH host     port (str): SSH port     private_key (str): SSH private key file path     username (str): SSH user     disable_rsa_512_256 (boolean): If the value is True, then rsa-sha2-512 and rsa-sha2-256 algorithm will be disabled</p> Source code in <code>honeydew/ssh.py</code> Python<pre><code>class SshConnector:\n    \"\"\"Instantiate an SSH connector.\n    Args:\n        host (str): SSH host\n        port (str): SSH port\n        private_key (str): SSH private key file path\n        username (str): SSH user\n        disable_rsa_512_256 (boolean): If the value is True, then rsa-sha2-512 and rsa-sha2-256 algorithm will be disabled\n    \"\"\"    \n    def __init__(self, host, port, private_key, username, disable_rsa_512_256=False):\n        self.host = host\n        self.port = port\n        self.private_key = private_key\n        self.username = username\n        self.disable_rsa_512_256 = disable_rsa_512_256\n\n        self.ssh = SSHClient()\n        self.ssh.load_system_host_keys()\n        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n        self.key = paramiko.RSAKey.from_private_key_file(self.private_key)\n        if self.disable_rsa_512_256 == False:\n            self.ssh.connect(self.host, port=self.port, username=self.username, pkey=self.key, timeout=3600)\n        else:\n            self.ssh.connect(self.host, port=self.port, username=self.username, pkey=self.key, timeout=3600, disabled_algorithms=dict(pubkeys=[\"rsa-sha2-512\", \"rsa-sha2-256\"]))\n\n    def scp_upload(self, src, dst):\n        \"\"\"\n        Upload a file with SCP\n        Args:\n            src (str): Path of source file\n            dst (str): Path of destination file\n        Returns:\n            result (str): The result of function\n        \"\"\"        \n        scp = SCPClient(self.ssh.get_transport())\n        scp.put(src, dst)    \n        return \"\"\"{src} has been uploaded!\"\"\".format(src=src)\n\n    def scp_download(self, src, dst):\n        \"\"\"\n        Download a file with SCP\n        Args:\n            src (str): Path of source file\n            dst (str): Path of destination file\n        Returns:\n            result (str): The result of function\n        \"\"\"                \n        scp = SCPClient(self.ssh.get_transport())\n        scp.get(src, dst)    \n        return \"\"\"{src} has been downloaded!\"\"\".format(src=src)\n</code></pre>"},{"location":"ssh/#honeydew.ssh.SshConnector.scp_download","title":"<code>scp_download(src, dst)</code>","text":"<p>Download a file with SCP Args:     src (str): Path of source file     dst (str): Path of destination file Returns:     result (str): The result of function</p> Source code in <code>honeydew/ssh.py</code> Python<pre><code>def scp_download(self, src, dst):\n    \"\"\"\n    Download a file with SCP\n    Args:\n        src (str): Path of source file\n        dst (str): Path of destination file\n    Returns:\n        result (str): The result of function\n    \"\"\"                \n    scp = SCPClient(self.ssh.get_transport())\n    scp.get(src, dst)    \n    return \"\"\"{src} has been downloaded!\"\"\".format(src=src)\n</code></pre>"},{"location":"ssh/#honeydew.ssh.SshConnector.scp_upload","title":"<code>scp_upload(src, dst)</code>","text":"<p>Upload a file with SCP Args:     src (str): Path of source file     dst (str): Path of destination file Returns:     result (str): The result of function</p> Source code in <code>honeydew/ssh.py</code> Python<pre><code>def scp_upload(self, src, dst):\n    \"\"\"\n    Upload a file with SCP\n    Args:\n        src (str): Path of source file\n        dst (str): Path of destination file\n    Returns:\n        result (str): The result of function\n    \"\"\"        \n    scp = SCPClient(self.ssh.get_transport())\n    scp.put(src, dst)    \n    return \"\"\"{src} has been uploaded!\"\"\".format(src=src)\n</code></pre>"},{"location":"utils/","title":"Utility Functions","text":""},{"location":"utils/#honeydew.utils.Utils","title":"<code>Utils</code>","text":"<p>Instantiate utilities.</p> Source code in <code>honeydew/utils.py</code> Python<pre><code>class Utils:\n    \"\"\"Instantiate utilities.\n    \"\"\"    \n    def __init__(self, name=''):\n        \"\"\"Instantiate utilities.\n        \"\"\"    \n\n    def convert_dt_to_epoch(self, dt):\n        \"\"\"\n        Convert datetime in UTC time zone to epoch (unix time)\n        Args:\n            dt (datetime): datetime\n        Returns:\n            result (int): epoch or unix time\n        \"\"\"\n        return calendar.timegm(dt.utctimetuple())\n\n    def convert_epoch_to_dt(self, epoch):\n        \"\"\"\n        Convert epoch to datetime\n        Args:\n            epoch (int): epoch or unix time\n        Returns:\n            result (datetime): datetime\n        \"\"\"\n        if epoch &gt; 9999999999:\n            epoch = round(epoch/1000)\n        return datetime.fromtimestamp(s)\n</code></pre>"},{"location":"utils/#honeydew.utils.Utils.__init__","title":"<code>__init__(name='')</code>","text":"<p>Instantiate utilities.</p> Source code in <code>honeydew/utils.py</code> Python<pre><code>def __init__(self, name=''):\n    \"\"\"Instantiate utilities.\n    \"\"\"    \n</code></pre>"},{"location":"utils/#honeydew.utils.Utils.convert_dt_to_epoch","title":"<code>convert_dt_to_epoch(dt)</code>","text":"<p>Convert datetime in UTC time zone to epoch (unix time) Args:     dt (datetime): datetime Returns:     result (int): epoch or unix time</p> Source code in <code>honeydew/utils.py</code> Python<pre><code>def convert_dt_to_epoch(self, dt):\n    \"\"\"\n    Convert datetime in UTC time zone to epoch (unix time)\n    Args:\n        dt (datetime): datetime\n    Returns:\n        result (int): epoch or unix time\n    \"\"\"\n    return calendar.timegm(dt.utctimetuple())\n</code></pre>"},{"location":"utils/#honeydew.utils.Utils.convert_epoch_to_dt","title":"<code>convert_epoch_to_dt(epoch)</code>","text":"<p>Convert epoch to datetime Args:     epoch (int): epoch or unix time Returns:     result (datetime): datetime</p> Source code in <code>honeydew/utils.py</code> Python<pre><code>def convert_epoch_to_dt(self, epoch):\n    \"\"\"\n    Convert epoch to datetime\n    Args:\n        epoch (int): epoch or unix time\n    Returns:\n        result (datetime): datetime\n    \"\"\"\n    if epoch &gt; 9999999999:\n        epoch = round(epoch/1000)\n    return datetime.fromtimestamp(s)\n</code></pre>"},{"location":"utils/#honeydew.utils.compress","title":"<code>compress(dir_path, file_pattern='*', delete_after_compression=False)</code>","text":"<p>Compress files with pattern or prefix from a directory. Type \"*\" for all files. Args:     dir_path (str): Directory path     file_pattern (str): File pattern or prefix     delete_after_zip (bool): Delete original files after compression</p> Source code in <code>honeydew/utils.py</code> Python<pre><code>def compress(dir_path, file_pattern='*', delete_after_compression=False):\n    \"\"\"Compress files with pattern or prefix from a directory. Type \"*\" for all files.\n    Args:\n        dir_path (str): Directory path\n        file_pattern (str): File pattern or prefix\n        delete_after_zip (bool): Delete original files after compression\n    \"\"\"\n\n    import gzip\n    import shutil\n    from pathlib import Path\n    for p in Path(dir_path).glob(file_pattern):\n        with open(p, 'rb') as f_in:\n            with gzip.open(f\"{p}.gz\", 'wb') as f_out:\n                shutil.copyfileobj(f_in, f_out)\n        if delete_after_compression:\n            os.remove(p)\n</code></pre>"},{"location":"utils/#honeydew.utils.compress_parallel","title":"<code>compress_parallel(dir_path, file_pattern='*', delete_after_compressing=False)</code>","text":"<p>Compress files with pattern or prefix from a directory parallely. Type \"*\" for all files.</p> Source code in <code>honeydew/utils.py</code> Python<pre><code>def compress_parallel(dir_path, file_pattern='*', delete_after_compressing=False):\n    \"\"\"Compress files with pattern or prefix from a directory parallely. Type \"*\" for all files.\"\"\"\n    from pathlib import Path  \n    from pigz_python import PigzFile\n    import os\n    for p in Path(dir_path).glob(file_pattern):\n        pigz_file = PigzFile(p)\n        pigz_file.process_compression_target()\n        if delete_after_compressing:\n            os.remove(p)            \n</code></pre>"}]}